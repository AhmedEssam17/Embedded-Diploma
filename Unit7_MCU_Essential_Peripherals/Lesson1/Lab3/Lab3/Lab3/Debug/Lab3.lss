
Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005e4  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000055f  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000261  00000000  00000000  00000ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033a  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000012aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
	
	//DDRD 0 >> input pulldown switch
	ClearBit(DDRD, 0);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8e 7f       	andi	r24, 0xFE	; 254
  70:	81 bb       	out	0x11, r24	; 17
	ClearBit(PORTD, 0);
  72:	82 b3       	in	r24, 0x12	; 18
  74:	8e 7f       	andi	r24, 0xFE	; 254
  76:	82 bb       	out	0x12, r24	; 18
	//PORTD 4,5
	SetBit(DDRD, 4);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	80 61       	ori	r24, 0x10	; 16
  7c:	81 bb       	out	0x11, r24	; 17
	SetBit(DDRD, 5);
  7e:	81 b3       	in	r24, 0x11	; 17
  80:	80 62       	ori	r24, 0x20	; 32
  82:	81 bb       	out	0x11, r24	; 17
	
	while (1)
	{
		if(ReadBit(PIND, 0) == 1){
  84:	80 b3       	in	r24, 0x10	; 16
  86:	81 70       	andi	r24, 0x01	; 1
  88:	80 bb       	out	0x10, r24	; 16
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	d9 f7       	brne	.-10     	; 0x84 <main+0x18>
			SetBit(PORTD, 4);
  8e:	82 b3       	in	r24, 0x12	; 18
  90:	80 61       	ori	r24, 0x10	; 16
  92:	82 bb       	out	0x12, r24	; 18
			SetBit(PORTD, 5);
  94:	82 b3       	in	r24, 0x12	; 18
  96:	80 62       	ori	r24, 0x20	; 32
  98:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	89 e6       	ldi	r24, 0x69	; 105
  9e:	98 e1       	ldi	r25, 0x18	; 24
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x34>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x3e>
  aa:	00 00       	nop
			_delay_ms(1000);
			ClearBit(PORTD, 4);
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	8f 7e       	andi	r24, 0xEF	; 239
  b0:	82 bb       	out	0x12, r24	; 18
			ClearBit(PORTD, 5);
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	8f 7d       	andi	r24, 0xDF	; 223
  b6:	82 bb       	out	0x12, r24	; 18
			while(ReadBit(PORTD, 0) == 1);
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	81 70       	andi	r24, 0x01	; 1
  bc:	82 bb       	out	0x12, r24	; 18
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	d9 f3       	breq	.-10     	; 0xb8 <main+0x4c>
  c2:	e0 cf       	rjmp	.-64     	; 0x84 <main+0x18>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
