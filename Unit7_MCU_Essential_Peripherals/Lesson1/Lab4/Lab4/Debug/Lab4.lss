
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000644  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057f  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000296  00000000  00000000  00000d73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033a  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000eb  00000000  00000000  0000136a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001455  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	unsigned char i, j, k;
	DDRC = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	
	while (1)
	{
		for(i = 0; i < 10; i++){
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	29 c0       	rjmp	.+82     	; 0xc6 <main+0x5a>
			for(j = 0; j < 10; j++){
				for(k = 0; k < 10; k++){
					PORTC = 0b1101 | (i<<4);
  74:	50 e1       	ldi	r21, 0x10	; 16
  76:	45 9f       	mul	r20, r21
  78:	c0 01       	movw	r24, r0
  7a:	11 24       	eor	r1, r1
  7c:	8d 60       	ori	r24, 0x0D	; 13
  7e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	8f e7       	ldi	r24, 0x7F	; 127
  82:	98 e3       	ldi	r25, 0x38	; 56
  84:	51 e0       	ldi	r21, 0x01	; 1
  86:	81 50       	subi	r24, 0x01	; 1
  88:	90 40       	sbci	r25, 0x00	; 0
  8a:	50 40       	sbci	r21, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <main+0x1a>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x24>
  90:	00 00       	nop
					_delay_ms(50);
					PORTC = 0b0111 | (j<<4);
  92:	50 e1       	ldi	r21, 0x10	; 16
  94:	35 9f       	mul	r19, r21
  96:	c0 01       	movw	r24, r0
  98:	11 24       	eor	r1, r1
  9a:	87 60       	ori	r24, 0x07	; 7
  9c:	85 bb       	out	0x15, r24	; 21
  9e:	8f e7       	ldi	r24, 0x7F	; 127
  a0:	98 e3       	ldi	r25, 0x38	; 56
  a2:	51 e0       	ldi	r21, 0x01	; 1
  a4:	81 50       	subi	r24, 0x01	; 1
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	50 40       	sbci	r21, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x38>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x42>
  ae:	00 00       	nop
	
	while (1)
	{
		for(i = 0; i < 10; i++){
			for(j = 0; j < 10; j++){
				for(k = 0; k < 10; k++){
  b0:	2f 5f       	subi	r18, 0xFF	; 255
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <main+0x4a>
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	2a 30       	cpi	r18, 0x0A	; 10
  b8:	e8 f2       	brcs	.-70     	; 0x74 <main+0x8>
	DDRC = 0xff;
	
	while (1)
	{
		for(i = 0; i < 10; i++){
			for(j = 0; j < 10; j++){
  ba:	3f 5f       	subi	r19, 0xFF	; 255
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <main+0x54>
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	3a 30       	cpi	r19, 0x0A	; 10
  c2:	c0 f3       	brcs	.-16     	; 0xb4 <main+0x48>
	unsigned char i, j, k;
	DDRC = 0xff;
	
	while (1)
	{
		for(i = 0; i < 10; i++){
  c4:	4f 5f       	subi	r20, 0xFF	; 255
  c6:	4a 30       	cpi	r20, 0x0A	; 10
  c8:	d0 f3       	brcs	.-12     	; 0xbe <main+0x52>
  ca:	d2 cf       	rjmp	.-92     	; 0x70 <main+0x4>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
