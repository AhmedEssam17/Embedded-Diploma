
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c50  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000d80  08000d80  00010d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000da8  08000da8  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000da8  08000da8  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000da8  08000da8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000da8  08000da8  00010da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dac  08000dac  00010dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000020  08000dd0  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08000dd0  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003023  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000771  00000000  00000000  0002306c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006c4  00000000  00000000  000237dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000140  00000000  00000000  00023ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f8  00000000  00000000  00023fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001fdc  00000000  00000000  000240e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001a59  00000000  00000000  000260bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007ae5  00000000  00000000  00027b15  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002f5fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003a0  00000000  00000000  0002f678  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d68 	.word	0x08000d68

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000d68 	.word	0x08000d68

08000170 <Get_CRLH_Position>:
 */

#include "gpio.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d042      	beq.n	8000206 <Get_CRLH_Position+0x96>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <Get_CRLH_Position+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d036      	beq.n	80001f6 <Get_CRLH_Position+0x86>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <Get_CRLH_Position+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d02e      	beq.n	80001ee <Get_CRLH_Position+0x7e>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d02e      	beq.n	80001f2 <Get_CRLH_Position+0x82>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d028      	beq.n	80001ea <Get_CRLH_Position+0x7a>
 8000198:	e047      	b.n	800022a <Get_CRLH_Position+0xba>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d02f      	beq.n	80001fe <Get_CRLH_Position+0x8e>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d02f      	beq.n	8000202 <Get_CRLH_Position+0x92>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d029      	beq.n	80001fa <Get_CRLH_Position+0x8a>
 80001a6:	e040      	b.n	800022a <Get_CRLH_Position+0xba>
 80001a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ac:	d033      	beq.n	8000216 <Get_CRLH_Position+0xa6>
 80001ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b2:	dc09      	bgt.n	80001c8 <Get_CRLH_Position+0x58>
 80001b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b8:	d029      	beq.n	800020e <Get_CRLH_Position+0x9e>
 80001ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001be:	d028      	beq.n	8000212 <Get_CRLH_Position+0xa2>
 80001c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c4:	d021      	beq.n	800020a <Get_CRLH_Position+0x9a>
 80001c6:	e030      	b.n	800022a <Get_CRLH_Position+0xba>
 80001c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001cc:	d027      	beq.n	800021e <Get_CRLH_Position+0xae>
 80001ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d2:	dc03      	bgt.n	80001dc <Get_CRLH_Position+0x6c>
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d01f      	beq.n	800021a <Get_CRLH_Position+0xaa>
 80001da:	e026      	b.n	800022a <Get_CRLH_Position+0xba>
 80001dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e0:	d01f      	beq.n	8000222 <Get_CRLH_Position+0xb2>
 80001e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e6:	d01e      	beq.n	8000226 <Get_CRLH_Position+0xb6>
 80001e8:	e01f      	b.n	800022a <Get_CRLH_Position+0xba>
	case GPIO_PIN_0:
		return 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	e01e      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 80001ee:	2304      	movs	r3, #4
 80001f0:	e01c      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 80001f2:	2308      	movs	r3, #8
 80001f4:	e01a      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 80001f6:	230c      	movs	r3, #12
 80001f8:	e018      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 80001fa:	2310      	movs	r3, #16
 80001fc:	e016      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 80001fe:	2314      	movs	r3, #20
 8000200:	e014      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000202:	2318      	movs	r3, #24
 8000204:	e012      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000206:	231c      	movs	r3, #28
 8000208:	e010      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 800020a:	2300      	movs	r3, #0
 800020c:	e00e      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 800020e:	2304      	movs	r3, #4
 8000210:	e00c      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000212:	2308      	movs	r3, #8
 8000214:	e00a      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000216:	230c      	movs	r3, #12
 8000218:	e008      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 800021a:	2310      	movs	r3, #16
 800021c:	e006      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 800021e:	2314      	movs	r3, #20
 8000220:	e004      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000222:	2318      	movs	r3, #24
 8000224:	e002      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000226:	231c      	movs	r3, #28
 8000228:	e000      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 800022a:	2300      	movs	r3, #0
}
 800022c:	4618      	mov	r0, r3
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <MCAL_GPIO_init>:
 * Note				-STM32F103C6 MCU has GPIO A..E but LQFP48 only has the following:
 * 					 GPIOA & GPIOB Fully included
 * 					 GPIOC & GPIOD Partially included
 * 					 GPIOE not included
 */
void MCAL_GPIO_init(GPIO_t *GPIOx, GPIO_PinConfig_t *PinConfig){
 8000236:	b590      	push	{r4, r7, lr}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
 800023e:	6039      	str	r1, [r7, #0]
	volatile uint32_t *configRegister = NULL;
 8000240:	2300      	movs	r3, #0
 8000242:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_CONFIG = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	73fb      	strb	r3, [r7, #15]

	configRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL: &GPIOx->CRH;
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	2bff      	cmp	r3, #255	; 0xff
 800024e:	d801      	bhi.n	8000254 <MCAL_GPIO_init+0x1e>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	e001      	b.n	8000258 <MCAL_GPIO_init+0x22>
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3304      	adds	r3, #4
 8000258:	60bb      	str	r3, [r7, #8]

	//Clear CNF & MODE
	(*configRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	881b      	ldrh	r3, [r3, #0]
 800025e:	4618      	mov	r0, r3
 8000260:	f7ff ff86 	bl	8000170 <Get_CRLH_Position>
 8000264:	4603      	mov	r3, r0
 8000266:	461a      	mov	r2, r3
 8000268:	230f      	movs	r3, #15
 800026a:	4093      	lsls	r3, r2
 800026c:	43da      	mvns	r2, r3
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	401a      	ands	r2, r3
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	601a      	str	r2, [r3, #0]

	//If PIN is OUTPUT
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) ||
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	885b      	ldrh	r3, [r3, #2]
 800027c:	2b04      	cmp	r3, #4
 800027e:	d00b      	beq.n	8000298 <MCAL_GPIO_init+0x62>
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	885b      	ldrh	r3, [r3, #2]
 8000284:	2b05      	cmp	r3, #5
 8000286:	d007      	beq.n	8000298 <MCAL_GPIO_init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD))
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	885b      	ldrh	r3, [r3, #2]
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) ||
 800028c:	2b06      	cmp	r3, #6
 800028e:	d003      	beq.n	8000298 <MCAL_GPIO_init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD))
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	885b      	ldrh	r3, [r3, #2]
 8000294:	2b07      	cmp	r3, #7
 8000296:	d10e      	bne.n	80002b6 <MCAL_GPIO_init+0x80>
	{
		PIN_CONFIG = ((((PinConfig->GPIO_MODE - 4) << 2) | PinConfig->GPIO_OUTPUT_SPEED) & 0x0F);
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	885b      	ldrh	r3, [r3, #2]
 800029c:	3b04      	subs	r3, #4
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	b25a      	sxtb	r2, r3
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	889b      	ldrh	r3, [r3, #4]
 80002a6:	b25b      	sxtb	r3, r3
 80002a8:	4313      	orrs	r3, r2
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	f003 030f 	and.w	r3, r3, #15
 80002b2:	73fb      	strb	r3, [r7, #15]
 80002b4:	e02d      	b.n	8000312 <MCAL_GPIO_init+0xdc>
	}
	else //PIN is INPUT
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOAT) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)){
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	885b      	ldrh	r3, [r3, #2]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d003      	beq.n	80002c6 <MCAL_GPIO_init+0x90>
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	885b      	ldrh	r3, [r3, #2]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d108      	bne.n	80002d8 <MCAL_GPIO_init+0xa2>
			PIN_CONFIG = ((((PinConfig->GPIO_MODE - 4) << 2) | 0x0) & 0x0F);
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	885b      	ldrh	r3, [r3, #2]
 80002ca:	3b04      	subs	r3, #4
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	f003 030f 	and.w	r3, r3, #15
 80002d4:	73fb      	strb	r3, [r7, #15]
 80002d6:	e01c      	b.n	8000312 <MCAL_GPIO_init+0xdc>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF){
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	885b      	ldrh	r3, [r3, #2]
 80002dc:	2b08      	cmp	r3, #8
 80002de:	d102      	bne.n	80002e6 <MCAL_GPIO_init+0xb0>
			PIN_CONFIG = ((((GPIO_MODE_INPUT_FLOAT) << 2) | 0x0) & 0x0F);
 80002e0:	2304      	movs	r3, #4
 80002e2:	73fb      	strb	r3, [r7, #15]
 80002e4:	e015      	b.n	8000312 <MCAL_GPIO_init+0xdc>
		}
		else{
			PIN_CONFIG = ((((GPIO_MODE_INPUT_PU) << 2) | 0x0) & 0x0F);
 80002e6:	2308      	movs	r3, #8
 80002e8:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU){
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	885b      	ldrh	r3, [r3, #2]
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	d107      	bne.n	8000302 <MCAL_GPIO_init+0xcc>
				//Input Pull-Up >> GPIOx->ODR = 1, Table 20: Port bit configuration table.
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	68db      	ldr	r3, [r3, #12]
 80002f6:	683a      	ldr	r2, [r7, #0]
 80002f8:	8812      	ldrh	r2, [r2, #0]
 80002fa:	431a      	orrs	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	e007      	b.n	8000312 <MCAL_GPIO_init+0xdc>
			}
			else{
				//Input Pull-Down >> GPIOx->ODR = 0, Table 20: Port bit configuration table.
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	68db      	ldr	r3, [r3, #12]
 8000306:	683a      	ldr	r2, [r7, #0]
 8000308:	8812      	ldrh	r2, [r2, #0]
 800030a:	43d2      	mvns	r2, r2
 800030c:	401a      	ands	r2, r3
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configRegister) |= (PIN_CONFIG  << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000312:	7bfc      	ldrb	r4, [r7, #15]
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	881b      	ldrh	r3, [r3, #0]
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff29 	bl	8000170 <Get_CRLH_Position>
 800031e:	4603      	mov	r3, r0
 8000320:	fa04 f203 	lsl.w	r2, r4, r3
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	431a      	orrs	r2, r3
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	601a      	str	r2, [r3, #0]
}
 800032e:	bf00      	nop
 8000330:	3714      	adds	r7, #20
 8000332:	46bd      	mov	sp, r7
 8000334:	bd90      	pop	{r4, r7, pc}

08000336 <MCAL_GPIO_ReadPin>:
 * @param [in]	 	-GPIOx: where x = (A,B,C,D,E)
 * @param [in]	 	-PinNumber: Set PinNumber based on @ref GPIO_PIN_def
 * @retval 			-PinValue: Input PIN value based on @ref GPIO_PIN_STATUS_def
 * Note				-NONE
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_t *GPIOx, uint16_t PinNumber){
 8000336:	b480      	push	{r7}
 8000338:	b085      	sub	sp, #20
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
 800033e:	460b      	mov	r3, r1
 8000340:	807b      	strh	r3, [r7, #2]
	uint8_t bitValue;
	if((GPIOx->IDR & PinNumber) != (uint32_t)GPIO_PIN_RESET){
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	689a      	ldr	r2, [r3, #8]
 8000346:	887b      	ldrh	r3, [r7, #2]
 8000348:	4013      	ands	r3, r2
 800034a:	2b00      	cmp	r3, #0
 800034c:	d002      	beq.n	8000354 <MCAL_GPIO_ReadPin+0x1e>
		bitValue = GPIO_PIN_SET;
 800034e:	2301      	movs	r3, #1
 8000350:	73fb      	strb	r3, [r7, #15]
 8000352:	e001      	b.n	8000358 <MCAL_GPIO_ReadPin+0x22>
	}
	else{
		bitValue = GPIO_PIN_RESET;
 8000354:	2300      	movs	r3, #0
 8000356:	73fb      	strb	r3, [r7, #15]
	}
	return bitValue;
 8000358:	7bfb      	ldrb	r3, [r7, #15]
}
 800035a:	4618      	mov	r0, r3
 800035c:	3714      	adds	r7, #20
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <MCAL_GPIO_WritePin>:
 * @param [in]	 	-PinNumber: Set PinNumber based on @ref GPIO_PIN_def
 * @param [in]	 	-data: value to be written on PIN
 * @retval 			-NONE
 * Note				-NONE
 */
void MCAL_GPIO_WritePin(GPIO_t *GPIOx, uint16_t PinNumber, uint8_t data){
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	807b      	strh	r3, [r7, #2]
 8000370:	4613      	mov	r3, r2
 8000372:	707b      	strb	r3, [r7, #1]
	if(data != GPIO_PIN_RESET){
 8000374:	787b      	ldrb	r3, [r7, #1]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d006      	beq.n	8000388 <MCAL_GPIO_WritePin+0x24>
		GPIOx->ODR |= PinNumber;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	68da      	ldr	r2, [r3, #12]
 800037e:	887b      	ldrh	r3, [r7, #2]
 8000380:	431a      	orrs	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	60da      	str	r2, [r3, #12]
	}
	else{
		GPIOx->ODR &= ~(PinNumber);
	}
}
 8000386:	e006      	b.n	8000396 <MCAL_GPIO_WritePin+0x32>
		GPIOx->ODR &= ~(PinNumber);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	887a      	ldrh	r2, [r7, #2]
 800038e:	43d2      	mvns	r2, r2
 8000390:	401a      	ands	r2, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	60da      	str	r2, [r3, #12]
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <MCAL_GPIO_WritePort>:
 * @param [in]	 	-GPIOx: where x = (A,B,C,D,E)
 * @param [in]	 	-data: value to be written on PORT
 * @retval 			-NONE
 * Note				-NONE
 */
void MCAL_GPIO_WritePort(GPIO_t *GPIOx, uint16_t data){
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	460b      	mov	r3, r1
 80003aa:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)data;
 80003ac:	887a      	ldrh	r2, [r7, #2]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	60da      	str	r2, [r3, #12]
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr

080003bc <Keypad_init>:
#include "keypad.h"

int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2, C3};//columns

void Keypad_init(){
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0

	PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80003c0:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <Keypad_init+0xfc>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003c6:	4b3c      	ldr	r3, [pc, #240]	; (80004b8 <Keypad_init+0xfc>)
 80003c8:	2204      	movs	r2, #4
 80003ca:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <Keypad_init+0xfc>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(KEYPAD_PORT, &PinConfig);
 80003d2:	4939      	ldr	r1, [pc, #228]	; (80004b8 <Keypad_init+0xfc>)
 80003d4:	4839      	ldr	r0, [pc, #228]	; (80004bc <Keypad_init+0x100>)
 80003d6:	f7ff ff2e 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 80003da:	4b37      	ldr	r3, [pc, #220]	; (80004b8 <Keypad_init+0xfc>)
 80003dc:	2202      	movs	r2, #2
 80003de:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <Keypad_init+0xfc>)
 80003e2:	2204      	movs	r2, #4
 80003e4:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 80003e6:	4b34      	ldr	r3, [pc, #208]	; (80004b8 <Keypad_init+0xfc>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(KEYPAD_PORT, &PinConfig);
 80003ec:	4932      	ldr	r1, [pc, #200]	; (80004b8 <Keypad_init+0xfc>)
 80003ee:	4833      	ldr	r0, [pc, #204]	; (80004bc <Keypad_init+0x100>)
 80003f0:	f7ff ff21 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <Keypad_init+0xfc>)
 80003f6:	2204      	movs	r2, #4
 80003f8:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003fa:	4b2f      	ldr	r3, [pc, #188]	; (80004b8 <Keypad_init+0xfc>)
 80003fc:	2204      	movs	r2, #4
 80003fe:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000400:	4b2d      	ldr	r3, [pc, #180]	; (80004b8 <Keypad_init+0xfc>)
 8000402:	2201      	movs	r2, #1
 8000404:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(KEYPAD_PORT, &PinConfig);
 8000406:	492c      	ldr	r1, [pc, #176]	; (80004b8 <Keypad_init+0xfc>)
 8000408:	482c      	ldr	r0, [pc, #176]	; (80004bc <Keypad_init+0x100>)
 800040a:	f7ff ff14 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 800040e:	4b2a      	ldr	r3, [pc, #168]	; (80004b8 <Keypad_init+0xfc>)
 8000410:	2208      	movs	r2, #8
 8000412:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000414:	4b28      	ldr	r3, [pc, #160]	; (80004b8 <Keypad_init+0xfc>)
 8000416:	2204      	movs	r2, #4
 8000418:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 800041a:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <Keypad_init+0xfc>)
 800041c:	2201      	movs	r2, #1
 800041e:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(KEYPAD_PORT, &PinConfig);
 8000420:	4925      	ldr	r1, [pc, #148]	; (80004b8 <Keypad_init+0xfc>)
 8000422:	4826      	ldr	r0, [pc, #152]	; (80004bc <Keypad_init+0x100>)
 8000424:	f7ff ff07 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000428:	4b23      	ldr	r3, [pc, #140]	; (80004b8 <Keypad_init+0xfc>)
 800042a:	2210      	movs	r2, #16
 800042c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800042e:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <Keypad_init+0xfc>)
 8000430:	2204      	movs	r2, #4
 8000432:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000434:	4b20      	ldr	r3, [pc, #128]	; (80004b8 <Keypad_init+0xfc>)
 8000436:	2201      	movs	r2, #1
 8000438:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(KEYPAD_PORT, &PinConfig);
 800043a:	491f      	ldr	r1, [pc, #124]	; (80004b8 <Keypad_init+0xfc>)
 800043c:	481f      	ldr	r0, [pc, #124]	; (80004bc <Keypad_init+0x100>)
 800043e:	f7ff fefa 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000442:	4b1d      	ldr	r3, [pc, #116]	; (80004b8 <Keypad_init+0xfc>)
 8000444:	2220      	movs	r2, #32
 8000446:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <Keypad_init+0xfc>)
 800044a:	2204      	movs	r2, #4
 800044c:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 800044e:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <Keypad_init+0xfc>)
 8000450:	2201      	movs	r2, #1
 8000452:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(KEYPAD_PORT, &PinConfig);
 8000454:	4918      	ldr	r1, [pc, #96]	; (80004b8 <Keypad_init+0xfc>)
 8000456:	4819      	ldr	r0, [pc, #100]	; (80004bc <Keypad_init+0x100>)
 8000458:	f7ff feed 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 800045c:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <Keypad_init+0xfc>)
 800045e:	2240      	movs	r2, #64	; 0x40
 8000460:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <Keypad_init+0xfc>)
 8000464:	2204      	movs	r2, #4
 8000466:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000468:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <Keypad_init+0xfc>)
 800046a:	2201      	movs	r2, #1
 800046c:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(KEYPAD_PORT, &PinConfig);
 800046e:	4912      	ldr	r1, [pc, #72]	; (80004b8 <Keypad_init+0xfc>)
 8000470:	4812      	ldr	r0, [pc, #72]	; (80004bc <Keypad_init+0x100>)
 8000472:	f7ff fee0 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000476:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <Keypad_init+0xfc>)
 8000478:	2280      	movs	r2, #128	; 0x80
 800047a:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800047c:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <Keypad_init+0xfc>)
 800047e:	2204      	movs	r2, #4
 8000480:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000482:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <Keypad_init+0xfc>)
 8000484:	2201      	movs	r2, #1
 8000486:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(KEYPAD_PORT, &PinConfig);
 8000488:	490b      	ldr	r1, [pc, #44]	; (80004b8 <Keypad_init+0xfc>)
 800048a:	480c      	ldr	r0, [pc, #48]	; (80004bc <Keypad_init+0x100>)
 800048c:	f7ff fed3 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_8;
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <Keypad_init+0xfc>)
 8000492:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000496:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <Keypad_init+0xfc>)
 800049a:	2204      	movs	r2, #4
 800049c:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <Keypad_init+0xfc>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(KEYPAD_PORT, &PinConfig);
 80004a4:	4904      	ldr	r1, [pc, #16]	; (80004b8 <Keypad_init+0xfc>)
 80004a6:	4805      	ldr	r0, [pc, #20]	; (80004bc <Keypad_init+0x100>)
 80004a8:	f7ff fec5 	bl	8000236 <MCAL_GPIO_init>

	MCAL_GPIO_WritePort(KEYPAD_PORT, 0xFF);
 80004ac:	21ff      	movs	r1, #255	; 0xff
 80004ae:	4803      	ldr	r0, [pc, #12]	; (80004bc <Keypad_init+0x100>)
 80004b0:	f7ff ff76 	bl	80003a0 <MCAL_GPIO_WritePort>
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	2000003c 	.word	0x2000003c
 80004bc:	40010c00 	.word	0x40010c00

080004c0 <Keypad_getkey>:

char Keypad_getkey(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	int i,j;
	for (i = 0; i < 4; i++){
 80004c6:	2300      	movs	r3, #0
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	e0b4      	b.n	8000636 <Keypad_getkey+0x176>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[0], GPIO_PIN_SET);
 80004cc:	4b5e      	ldr	r3, [pc, #376]	; (8000648 <Keypad_getkey+0x188>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	2201      	movs	r2, #1
 80004d4:	4619      	mov	r1, r3
 80004d6:	485d      	ldr	r0, [pc, #372]	; (800064c <Keypad_getkey+0x18c>)
 80004d8:	f7ff ff44 	bl	8000364 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[1], GPIO_PIN_SET);
 80004dc:	4b5a      	ldr	r3, [pc, #360]	; (8000648 <Keypad_getkey+0x188>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	2201      	movs	r2, #1
 80004e4:	4619      	mov	r1, r3
 80004e6:	4859      	ldr	r0, [pc, #356]	; (800064c <Keypad_getkey+0x18c>)
 80004e8:	f7ff ff3c 	bl	8000364 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[2], GPIO_PIN_SET);
 80004ec:	4b56      	ldr	r3, [pc, #344]	; (8000648 <Keypad_getkey+0x188>)
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	2201      	movs	r2, #1
 80004f4:	4619      	mov	r1, r3
 80004f6:	4855      	ldr	r0, [pc, #340]	; (800064c <Keypad_getkey+0x18c>)
 80004f8:	f7ff ff34 	bl	8000364 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[3], GPIO_PIN_SET);
 80004fc:	4b52      	ldr	r3, [pc, #328]	; (8000648 <Keypad_getkey+0x188>)
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	b29b      	uxth	r3, r3
 8000502:	2201      	movs	r2, #1
 8000504:	4619      	mov	r1, r3
 8000506:	4851      	ldr	r0, [pc, #324]	; (800064c <Keypad_getkey+0x18c>)
 8000508:	f7ff ff2c 	bl	8000364 <MCAL_GPIO_WritePin>

		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[i], GPIO_PIN_RESET);
 800050c:	4a4e      	ldr	r2, [pc, #312]	; (8000648 <Keypad_getkey+0x188>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000514:	b29b      	uxth	r3, r3
 8000516:	2200      	movs	r2, #0
 8000518:	4619      	mov	r1, r3
 800051a:	484c      	ldr	r0, [pc, #304]	; (800064c <Keypad_getkey+0x18c>)
 800051c:	f7ff ff22 	bl	8000364 <MCAL_GPIO_WritePin>

		for(j = 0; j < 4; j++){
 8000520:	2300      	movs	r3, #0
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	e080      	b.n	8000628 <Keypad_getkey+0x168>
			if ((MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j])) == 0)
 8000526:	4a4a      	ldr	r2, [pc, #296]	; (8000650 <Keypad_getkey+0x190>)
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800052e:	b29b      	uxth	r3, r3
 8000530:	4619      	mov	r1, r3
 8000532:	4846      	ldr	r0, [pc, #280]	; (800064c <Keypad_getkey+0x18c>)
 8000534:	f7ff feff 	bl	8000336 <MCAL_GPIO_ReadPin>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d171      	bne.n	8000622 <Keypad_getkey+0x162>
			{
				while((MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j])) == 0);
 800053e:	bf00      	nop
 8000540:	4a43      	ldr	r2, [pc, #268]	; (8000650 <Keypad_getkey+0x190>)
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000548:	b29b      	uxth	r3, r3
 800054a:	4619      	mov	r1, r3
 800054c:	483f      	ldr	r0, [pc, #252]	; (800064c <Keypad_getkey+0x18c>)
 800054e:	f7ff fef2 	bl	8000336 <MCAL_GPIO_ReadPin>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d0f3      	beq.n	8000540 <Keypad_getkey+0x80>
				switch(i){
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2b03      	cmp	r3, #3
 800055c:	d861      	bhi.n	8000622 <Keypad_getkey+0x162>
 800055e:	a201      	add	r2, pc, #4	; (adr r2, 8000564 <Keypad_getkey+0xa4>)
 8000560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000564:	08000575 	.word	0x08000575
 8000568:	0800059d 	.word	0x0800059d
 800056c:	080005c5 	.word	0x080005c5
 8000570:	080005ed 	.word	0x080005ed
				case (0):
						if (j == 0) return '7';
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d101      	bne.n	800057e <Keypad_getkey+0xbe>
 800057a:	2337      	movs	r3, #55	; 0x37
 800057c:	e060      	b.n	8000640 <Keypad_getkey+0x180>
						else if (j == 1) return '4';
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d101      	bne.n	8000588 <Keypad_getkey+0xc8>
 8000584:	2334      	movs	r3, #52	; 0x34
 8000586:	e05b      	b.n	8000640 <Keypad_getkey+0x180>
						else if (j == 2) return '1';
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	2b02      	cmp	r3, #2
 800058c:	d101      	bne.n	8000592 <Keypad_getkey+0xd2>
 800058e:	2331      	movs	r3, #49	; 0x31
 8000590:	e056      	b.n	8000640 <Keypad_getkey+0x180>
						else if (j == 3) return '?';
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	2b03      	cmp	r3, #3
 8000596:	d13d      	bne.n	8000614 <Keypad_getkey+0x154>
 8000598:	233f      	movs	r3, #63	; 0x3f
 800059a:	e051      	b.n	8000640 <Keypad_getkey+0x180>
						break;
				case (1):
						if (j == 0) return '8';
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d101      	bne.n	80005a6 <Keypad_getkey+0xe6>
 80005a2:	2338      	movs	r3, #56	; 0x38
 80005a4:	e04c      	b.n	8000640 <Keypad_getkey+0x180>
						else if (j == 1) return '5';
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d101      	bne.n	80005b0 <Keypad_getkey+0xf0>
 80005ac:	2335      	movs	r3, #53	; 0x35
 80005ae:	e047      	b.n	8000640 <Keypad_getkey+0x180>
						else if (j == 2) return '2';
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d101      	bne.n	80005ba <Keypad_getkey+0xfa>
 80005b6:	2332      	movs	r3, #50	; 0x32
 80005b8:	e042      	b.n	8000640 <Keypad_getkey+0x180>
						else if (j == 3) return '0';
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	2b03      	cmp	r3, #3
 80005be:	d12b      	bne.n	8000618 <Keypad_getkey+0x158>
 80005c0:	2330      	movs	r3, #48	; 0x30
 80005c2:	e03d      	b.n	8000640 <Keypad_getkey+0x180>
						break;
				case (2):
						if (j == 0) return '9';
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d101      	bne.n	80005ce <Keypad_getkey+0x10e>
 80005ca:	2339      	movs	r3, #57	; 0x39
 80005cc:	e038      	b.n	8000640 <Keypad_getkey+0x180>
						else if (j == 1) return '6';
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d101      	bne.n	80005d8 <Keypad_getkey+0x118>
 80005d4:	2336      	movs	r3, #54	; 0x36
 80005d6:	e033      	b.n	8000640 <Keypad_getkey+0x180>
						else if (j == 2) return '3';
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d101      	bne.n	80005e2 <Keypad_getkey+0x122>
 80005de:	2333      	movs	r3, #51	; 0x33
 80005e0:	e02e      	b.n	8000640 <Keypad_getkey+0x180>
						else if (j == 3) return '=';
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	2b03      	cmp	r3, #3
 80005e6:	d119      	bne.n	800061c <Keypad_getkey+0x15c>
 80005e8:	233d      	movs	r3, #61	; 0x3d
 80005ea:	e029      	b.n	8000640 <Keypad_getkey+0x180>
						break;
				case (3):
						if (j == 0) return '/';
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <Keypad_getkey+0x136>
 80005f2:	232f      	movs	r3, #47	; 0x2f
 80005f4:	e024      	b.n	8000640 <Keypad_getkey+0x180>
						else if (j == 1) return '*';
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d101      	bne.n	8000600 <Keypad_getkey+0x140>
 80005fc:	232a      	movs	r3, #42	; 0x2a
 80005fe:	e01f      	b.n	8000640 <Keypad_getkey+0x180>
						else if (j == 2) return '-';
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	2b02      	cmp	r3, #2
 8000604:	d101      	bne.n	800060a <Keypad_getkey+0x14a>
 8000606:	232d      	movs	r3, #45	; 0x2d
 8000608:	e01a      	b.n	8000640 <Keypad_getkey+0x180>
						else if (j == 3) return '+';
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2b03      	cmp	r3, #3
 800060e:	d107      	bne.n	8000620 <Keypad_getkey+0x160>
 8000610:	232b      	movs	r3, #43	; 0x2b
 8000612:	e015      	b.n	8000640 <Keypad_getkey+0x180>
						break;
 8000614:	bf00      	nop
 8000616:	e004      	b.n	8000622 <Keypad_getkey+0x162>
						break;
 8000618:	bf00      	nop
 800061a:	e002      	b.n	8000622 <Keypad_getkey+0x162>
						break;
 800061c:	bf00      	nop
 800061e:	e000      	b.n	8000622 <Keypad_getkey+0x162>
						break;
 8000620:	bf00      	nop
		for(j = 0; j < 4; j++){
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	2b03      	cmp	r3, #3
 800062c:	f77f af7b 	ble.w	8000526 <Keypad_getkey+0x66>
	for (i = 0; i < 4; i++){
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3301      	adds	r3, #1
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b03      	cmp	r3, #3
 800063a:	f77f af47 	ble.w	80004cc <Keypad_getkey+0xc>
				}
			}
		}
	}
	return 'A';
 800063e:	2341      	movs	r3, #65	; 0x41
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000010 	.word	0x20000010
 800064c:	40010c00 	.word	0x40010c00
 8000650:	20000000 	.word	0x20000000

08000654 <delay>:
 *  Author: AhmedEssam
 */ 

#include "lcd.h"

void delay(uint32_t n){
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for(i = 0; i < n; i++)
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	e00b      	b.n	800067a <delay+0x26>
		for(j = 0; j < 255; j++);
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	e002      	b.n	800066e <delay+0x1a>
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	3301      	adds	r3, #1
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	2bfe      	cmp	r3, #254	; 0xfe
 8000672:	d9f9      	bls.n	8000668 <delay+0x14>
	for(i = 0; i < n; i++)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	3301      	adds	r3, #1
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	429a      	cmp	r2, r3
 8000680:	d3ef      	bcc.n	8000662 <delay+0xe>
}
 8000682:	bf00      	nop
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <LCD_INIT>:

void LCD_INIT(){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	delay(20);
 8000690:	2014      	movs	r0, #20
 8000692:	f7ff ffdf 	bl	8000654 <delay>

	PinConfig.GPIO_PinNumber = RS_SWITCH;
 8000696:	4b5b      	ldr	r3, [pc, #364]	; (8000804 <LCD_INIT+0x178>)
 8000698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800069c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800069e:	4b59      	ldr	r3, [pc, #356]	; (8000804 <LCD_INIT+0x178>)
 80006a0:	2204      	movs	r2, #4
 80006a2:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 80006a4:	4b57      	ldr	r3, [pc, #348]	; (8000804 <LCD_INIT+0x178>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_CTRL, &PinConfig);
 80006aa:	4956      	ldr	r1, [pc, #344]	; (8000804 <LCD_INIT+0x178>)
 80006ac:	4856      	ldr	r0, [pc, #344]	; (8000808 <LCD_INIT+0x17c>)
 80006ae:	f7ff fdc2 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = RW_SWITCH;
 80006b2:	4b54      	ldr	r3, [pc, #336]	; (8000804 <LCD_INIT+0x178>)
 80006b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b8:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006ba:	4b52      	ldr	r3, [pc, #328]	; (8000804 <LCD_INIT+0x178>)
 80006bc:	2204      	movs	r2, #4
 80006be:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 80006c0:	4b50      	ldr	r3, [pc, #320]	; (8000804 <LCD_INIT+0x178>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_CTRL, &PinConfig);
 80006c6:	494f      	ldr	r1, [pc, #316]	; (8000804 <LCD_INIT+0x178>)
 80006c8:	484f      	ldr	r0, [pc, #316]	; (8000808 <LCD_INIT+0x17c>)
 80006ca:	f7ff fdb4 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = EN_SWITCH;
 80006ce:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <LCD_INIT+0x178>)
 80006d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d4:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006d6:	4b4b      	ldr	r3, [pc, #300]	; (8000804 <LCD_INIT+0x178>)
 80006d8:	2204      	movs	r2, #4
 80006da:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 80006dc:	4b49      	ldr	r3, [pc, #292]	; (8000804 <LCD_INIT+0x178>)
 80006de:	2201      	movs	r2, #1
 80006e0:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_CTRL, &PinConfig);
 80006e2:	4948      	ldr	r1, [pc, #288]	; (8000804 <LCD_INIT+0x178>)
 80006e4:	4848      	ldr	r0, [pc, #288]	; (8000808 <LCD_INIT+0x17c>)
 80006e6:	f7ff fda6 	bl	8000236 <MCAL_GPIO_init>

	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f0:	4845      	ldr	r0, [pc, #276]	; (8000808 <LCD_INIT+0x17c>)
 80006f2:	f7ff fe37 	bl	8000364 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fc:	4842      	ldr	r0, [pc, #264]	; (8000808 <LCD_INIT+0x17c>)
 80006fe:	f7ff fe31 	bl	8000364 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000708:	483f      	ldr	r0, [pc, #252]	; (8000808 <LCD_INIT+0x17c>)
 800070a:	f7ff fe2b 	bl	8000364 <MCAL_GPIO_WritePin>

	PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800070e:	4b3d      	ldr	r3, [pc, #244]	; (8000804 <LCD_INIT+0x178>)
 8000710:	2201      	movs	r2, #1
 8000712:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000714:	4b3b      	ldr	r3, [pc, #236]	; (8000804 <LCD_INIT+0x178>)
 8000716:	2204      	movs	r2, #4
 8000718:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 800071a:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <LCD_INIT+0x178>)
 800071c:	2201      	movs	r2, #1
 800071e:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000720:	4938      	ldr	r1, [pc, #224]	; (8000804 <LCD_INIT+0x178>)
 8000722:	4839      	ldr	r0, [pc, #228]	; (8000808 <LCD_INIT+0x17c>)
 8000724:	f7ff fd87 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 8000728:	4b36      	ldr	r3, [pc, #216]	; (8000804 <LCD_INIT+0x178>)
 800072a:	2202      	movs	r2, #2
 800072c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800072e:	4b35      	ldr	r3, [pc, #212]	; (8000804 <LCD_INIT+0x178>)
 8000730:	2204      	movs	r2, #4
 8000732:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000734:	4b33      	ldr	r3, [pc, #204]	; (8000804 <LCD_INIT+0x178>)
 8000736:	2201      	movs	r2, #1
 8000738:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 800073a:	4932      	ldr	r1, [pc, #200]	; (8000804 <LCD_INIT+0x178>)
 800073c:	4832      	ldr	r0, [pc, #200]	; (8000808 <LCD_INIT+0x17c>)
 800073e:	f7ff fd7a 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 8000742:	4b30      	ldr	r3, [pc, #192]	; (8000804 <LCD_INIT+0x178>)
 8000744:	2204      	movs	r2, #4
 8000746:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000748:	4b2e      	ldr	r3, [pc, #184]	; (8000804 <LCD_INIT+0x178>)
 800074a:	2204      	movs	r2, #4
 800074c:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 800074e:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <LCD_INIT+0x178>)
 8000750:	2201      	movs	r2, #1
 8000752:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000754:	492b      	ldr	r1, [pc, #172]	; (8000804 <LCD_INIT+0x178>)
 8000756:	482c      	ldr	r0, [pc, #176]	; (8000808 <LCD_INIT+0x17c>)
 8000758:	f7ff fd6d 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 800075c:	4b29      	ldr	r3, [pc, #164]	; (8000804 <LCD_INIT+0x178>)
 800075e:	2208      	movs	r2, #8
 8000760:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000762:	4b28      	ldr	r3, [pc, #160]	; (8000804 <LCD_INIT+0x178>)
 8000764:	2204      	movs	r2, #4
 8000766:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000768:	4b26      	ldr	r3, [pc, #152]	; (8000804 <LCD_INIT+0x178>)
 800076a:	2201      	movs	r2, #1
 800076c:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 800076e:	4925      	ldr	r1, [pc, #148]	; (8000804 <LCD_INIT+0x178>)
 8000770:	4825      	ldr	r0, [pc, #148]	; (8000808 <LCD_INIT+0x17c>)
 8000772:	f7ff fd60 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <LCD_INIT+0x178>)
 8000778:	2210      	movs	r2, #16
 800077a:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <LCD_INIT+0x178>)
 800077e:	2204      	movs	r2, #4
 8000780:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <LCD_INIT+0x178>)
 8000784:	2201      	movs	r2, #1
 8000786:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000788:	491e      	ldr	r1, [pc, #120]	; (8000804 <LCD_INIT+0x178>)
 800078a:	481f      	ldr	r0, [pc, #124]	; (8000808 <LCD_INIT+0x17c>)
 800078c:	f7ff fd53 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <LCD_INIT+0x178>)
 8000792:	2220      	movs	r2, #32
 8000794:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <LCD_INIT+0x178>)
 8000798:	2204      	movs	r2, #4
 800079a:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <LCD_INIT+0x178>)
 800079e:	2201      	movs	r2, #1
 80007a0:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 80007a2:	4918      	ldr	r1, [pc, #96]	; (8000804 <LCD_INIT+0x178>)
 80007a4:	4818      	ldr	r0, [pc, #96]	; (8000808 <LCD_INIT+0x17c>)
 80007a6:	f7ff fd46 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <LCD_INIT+0x178>)
 80007ac:	2240      	movs	r2, #64	; 0x40
 80007ae:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <LCD_INIT+0x178>)
 80007b2:	2204      	movs	r2, #4
 80007b4:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <LCD_INIT+0x178>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 80007bc:	4911      	ldr	r1, [pc, #68]	; (8000804 <LCD_INIT+0x178>)
 80007be:	4812      	ldr	r0, [pc, #72]	; (8000808 <LCD_INIT+0x17c>)
 80007c0:	f7ff fd39 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <LCD_INIT+0x178>)
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <LCD_INIT+0x178>)
 80007cc:	2204      	movs	r2, #4
 80007ce:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <LCD_INIT+0x178>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 80007d6:	490b      	ldr	r1, [pc, #44]	; (8000804 <LCD_INIT+0x178>)
 80007d8:	480b      	ldr	r0, [pc, #44]	; (8000808 <LCD_INIT+0x17c>)
 80007da:	f7ff fd2c 	bl	8000236 <MCAL_GPIO_init>

	delay(15);
 80007de:	200f      	movs	r0, #15
 80007e0:	f7ff ff38 	bl	8000654 <delay>
	LCD_ClearScreen();
 80007e4:	f000 f970 	bl	8000ac8 <LCD_ClearScreen>
	LCD_WriteCommand(LCD_FUNCTION_8BIT_2LINES);
 80007e8:	2038      	movs	r0, #56	; 0x38
 80007ea:	f000 f80f 	bl	800080c <LCD_WriteCommand>

	LCD_WriteCommand(LCD_ENTRY_MODE);
 80007ee:	2006      	movs	r0, #6
 80007f0:	f000 f80c 	bl	800080c <LCD_WriteCommand>
	LCD_WriteCommand(LCD_BEGIN_AT_FIRST_ROW);
 80007f4:	2080      	movs	r0, #128	; 0x80
 80007f6:	f000 f809 	bl	800080c <LCD_WriteCommand>
	LCD_WriteCommand(LCD_DISP_ON_CURSOR_BLINK);
 80007fa:	200f      	movs	r0, #15
 80007fc:	f000 f806 	bl	800080c <LCD_WriteCommand>
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2000003c 	.word	0x2000003c
 8000808:	40010800 	.word	0x40010800

0800080c <LCD_WriteCommand>:

void LCD_WriteCommand(unsigned char command){
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
		LCD_PORT = command;
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
		_delay_ms(1);
		LCD_lcd_kick();
	 */
	LCD_isBusy();
 8000816:	f000 f86d 	bl	80008f4 <LCD_isBusy>
	MCAL_GPIO_WritePort(LCD_PORT, command);
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	b29b      	uxth	r3, r3
 800081e:	4619      	mov	r1, r3
 8000820:	480b      	ldr	r0, [pc, #44]	; (8000850 <LCD_WriteCommand+0x44>)
 8000822:	f7ff fdbd 	bl	80003a0 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 7100 	mov.w	r1, #512	; 0x200
 800082c:	4808      	ldr	r0, [pc, #32]	; (8000850 <LCD_WriteCommand+0x44>)
 800082e:	f7ff fd99 	bl	8000364 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <LCD_WriteCommand+0x44>)
 800083a:	f7ff fd93 	bl	8000364 <MCAL_GPIO_WritePin>
	delay(1);
 800083e:	2001      	movs	r0, #1
 8000840:	f7ff ff08 	bl	8000654 <delay>
	LCD_Kick();
 8000844:	f000 f92a 	bl	8000a9c <LCD_Kick>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40010800 	.word	0x40010800

08000854 <LCD_WriteChar>:

void LCD_WriteChar(unsigned char data){
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
		LCD_CTRL &= ~(1 << RW_SWITCH);
		LCD_CTRL |= (1 << RS_SWITCH);
		_delay_ms(1);
		LCD_lcd_kick();
	 */
	LCD_isBusy();
 800085e:	f000 f849 	bl	80008f4 <LCD_isBusy>
	MCAL_GPIO_WritePort(LCD_PORT, data);
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	b29b      	uxth	r3, r3
 8000866:	4619      	mov	r1, r3
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <LCD_WriteChar+0x44>)
 800086a:	f7ff fd99 	bl	80003a0 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000874:	4808      	ldr	r0, [pc, #32]	; (8000898 <LCD_WriteChar+0x44>)
 8000876:	f7ff fd75 	bl	8000364 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <LCD_WriteChar+0x44>)
 8000882:	f7ff fd6f 	bl	8000364 <MCAL_GPIO_WritePin>
	delay(1);
 8000886:	2001      	movs	r0, #1
 8000888:	f7ff fee4 	bl	8000654 <delay>
	LCD_Kick();
 800088c:	f000 f906 	bl	8000a9c <LCD_Kick>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40010800 	.word	0x40010800

0800089c <LCD_WriteString>:

void LCD_WriteString(char* string){
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	int count = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 80008a8:	e01c      	b.n	80008e4 <LCD_WriteString+0x48>
		count++;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	3301      	adds	r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
		LCD_WriteChar(*string++);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	607a      	str	r2, [r7, #4]
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ffcb 	bl	8000854 <LCD_WriteChar>
		if (count == 16)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	2b10      	cmp	r3, #16
 80008c2:	d104      	bne.n	80008ce <LCD_WriteString+0x32>
		{
			LCD_GOTO_XY(2,0);
 80008c4:	2100      	movs	r1, #0
 80008c6:	2002      	movs	r0, #2
 80008c8:	f000 f905 	bl	8000ad6 <LCD_GOTO_XY>
 80008cc:	e00a      	b.n	80008e4 <LCD_WriteString+0x48>
		}
		else if (count == 32)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2b20      	cmp	r3, #32
 80008d2:	d107      	bne.n	80008e4 <LCD_WriteString+0x48>
		{
			LCD_ClearScreen();
 80008d4:	f000 f8f8 	bl	8000ac8 <LCD_ClearScreen>
			LCD_GOTO_XY(1,0);
 80008d8:	2100      	movs	r1, #0
 80008da:	2001      	movs	r0, #1
 80008dc:	f000 f8fb 	bl	8000ad6 <LCD_GOTO_XY>
			count = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1de      	bne.n	80008aa <LCD_WriteString+0xe>
		}
	}
}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <LCD_isBusy>:

void LCD_isBusy(void){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	LCD_CTRL &= ~(1 << RS_SWITCH);
	LCD_lcd_kick();
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
	LCD_CTRL &= ~(1 << RW_SWITCH);
	 */
	PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80008f8:	4b66      	ldr	r3, [pc, #408]	; (8000a94 <LCD_isBusy+0x1a0>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLOAT;
 80008fe:	4b65      	ldr	r3, [pc, #404]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000900:	2201      	movs	r2, #1
 8000902:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000904:	4963      	ldr	r1, [pc, #396]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000906:	4864      	ldr	r0, [pc, #400]	; (8000a98 <LCD_isBusy+0x1a4>)
 8000908:	f7ff fc95 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 800090c:	4b61      	ldr	r3, [pc, #388]	; (8000a94 <LCD_isBusy+0x1a0>)
 800090e:	2202      	movs	r2, #2
 8000910:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLOAT;
 8000912:	4b60      	ldr	r3, [pc, #384]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000914:	2201      	movs	r2, #1
 8000916:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000918:	495e      	ldr	r1, [pc, #376]	; (8000a94 <LCD_isBusy+0x1a0>)
 800091a:	485f      	ldr	r0, [pc, #380]	; (8000a98 <LCD_isBusy+0x1a4>)
 800091c:	f7ff fc8b 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 8000920:	4b5c      	ldr	r3, [pc, #368]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000922:	2204      	movs	r2, #4
 8000924:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLOAT;
 8000926:	4b5b      	ldr	r3, [pc, #364]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000928:	2201      	movs	r2, #1
 800092a:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 800092c:	4959      	ldr	r1, [pc, #356]	; (8000a94 <LCD_isBusy+0x1a0>)
 800092e:	485a      	ldr	r0, [pc, #360]	; (8000a98 <LCD_isBusy+0x1a4>)
 8000930:	f7ff fc81 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 8000934:	4b57      	ldr	r3, [pc, #348]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000936:	2208      	movs	r2, #8
 8000938:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLOAT;
 800093a:	4b56      	ldr	r3, [pc, #344]	; (8000a94 <LCD_isBusy+0x1a0>)
 800093c:	2201      	movs	r2, #1
 800093e:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000940:	4954      	ldr	r1, [pc, #336]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000942:	4855      	ldr	r0, [pc, #340]	; (8000a98 <LCD_isBusy+0x1a4>)
 8000944:	f7ff fc77 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000948:	4b52      	ldr	r3, [pc, #328]	; (8000a94 <LCD_isBusy+0x1a0>)
 800094a:	2210      	movs	r2, #16
 800094c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLOAT;
 800094e:	4b51      	ldr	r3, [pc, #324]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000950:	2201      	movs	r2, #1
 8000952:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000954:	494f      	ldr	r1, [pc, #316]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000956:	4850      	ldr	r0, [pc, #320]	; (8000a98 <LCD_isBusy+0x1a4>)
 8000958:	f7ff fc6d 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 800095c:	4b4d      	ldr	r3, [pc, #308]	; (8000a94 <LCD_isBusy+0x1a0>)
 800095e:	2220      	movs	r2, #32
 8000960:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLOAT;
 8000962:	4b4c      	ldr	r3, [pc, #304]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000964:	2201      	movs	r2, #1
 8000966:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000968:	494a      	ldr	r1, [pc, #296]	; (8000a94 <LCD_isBusy+0x1a0>)
 800096a:	484b      	ldr	r0, [pc, #300]	; (8000a98 <LCD_isBusy+0x1a4>)
 800096c:	f7ff fc63 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8000970:	4b48      	ldr	r3, [pc, #288]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000972:	2240      	movs	r2, #64	; 0x40
 8000974:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLOAT;
 8000976:	4b47      	ldr	r3, [pc, #284]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000978:	2201      	movs	r2, #1
 800097a:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 800097c:	4945      	ldr	r1, [pc, #276]	; (8000a94 <LCD_isBusy+0x1a0>)
 800097e:	4846      	ldr	r0, [pc, #280]	; (8000a98 <LCD_isBusy+0x1a4>)
 8000980:	f7ff fc59 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000984:	4b43      	ldr	r3, [pc, #268]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLOAT;
 800098a:	4b42      	ldr	r3, [pc, #264]	; (8000a94 <LCD_isBusy+0x1a0>)
 800098c:	2201      	movs	r2, #1
 800098e:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000990:	4940      	ldr	r1, [pc, #256]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000992:	4841      	ldr	r0, [pc, #260]	; (8000a98 <LCD_isBusy+0x1a4>)
 8000994:	f7ff fc4f 	bl	8000236 <MCAL_GPIO_init>


	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800099e:	483e      	ldr	r0, [pc, #248]	; (8000a98 <LCD_isBusy+0x1a4>)
 80009a0:	f7ff fce0 	bl	8000364 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009aa:	483b      	ldr	r0, [pc, #236]	; (8000a98 <LCD_isBusy+0x1a4>)
 80009ac:	f7ff fcda 	bl	8000364 <MCAL_GPIO_WritePin>

	LCD_Kick();
 80009b0:	f000 f874 	bl	8000a9c <LCD_Kick>

	PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80009b4:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <LCD_isBusy+0x1a0>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80009ba:	4b36      	ldr	r3, [pc, #216]	; (8000a94 <LCD_isBusy+0x1a0>)
 80009bc:	2204      	movs	r2, #4
 80009be:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 80009c0:	4b34      	ldr	r3, [pc, #208]	; (8000a94 <LCD_isBusy+0x1a0>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 80009c6:	4933      	ldr	r1, [pc, #204]	; (8000a94 <LCD_isBusy+0x1a0>)
 80009c8:	4833      	ldr	r0, [pc, #204]	; (8000a98 <LCD_isBusy+0x1a4>)
 80009ca:	f7ff fc34 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 80009ce:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <LCD_isBusy+0x1a0>)
 80009d0:	2202      	movs	r2, #2
 80009d2:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80009d4:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <LCD_isBusy+0x1a0>)
 80009d6:	2204      	movs	r2, #4
 80009d8:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 80009da:	4b2e      	ldr	r3, [pc, #184]	; (8000a94 <LCD_isBusy+0x1a0>)
 80009dc:	2201      	movs	r2, #1
 80009de:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 80009e0:	492c      	ldr	r1, [pc, #176]	; (8000a94 <LCD_isBusy+0x1a0>)
 80009e2:	482d      	ldr	r0, [pc, #180]	; (8000a98 <LCD_isBusy+0x1a4>)
 80009e4:	f7ff fc27 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 80009e8:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <LCD_isBusy+0x1a0>)
 80009ea:	2204      	movs	r2, #4
 80009ec:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80009ee:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <LCD_isBusy+0x1a0>)
 80009f0:	2204      	movs	r2, #4
 80009f2:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 80009f4:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <LCD_isBusy+0x1a0>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 80009fa:	4926      	ldr	r1, [pc, #152]	; (8000a94 <LCD_isBusy+0x1a0>)
 80009fc:	4826      	ldr	r0, [pc, #152]	; (8000a98 <LCD_isBusy+0x1a4>)
 80009fe:	f7ff fc1a 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 8000a02:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a04:	2208      	movs	r2, #8
 8000a06:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000a14:	491f      	ldr	r1, [pc, #124]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a16:	4820      	ldr	r0, [pc, #128]	; (8000a98 <LCD_isBusy+0x1a4>)
 8000a18:	f7ff fc0d 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a1e:	2210      	movs	r2, #16
 8000a20:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a24:	2204      	movs	r2, #4
 8000a26:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000a2e:	4919      	ldr	r1, [pc, #100]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a30:	4819      	ldr	r0, [pc, #100]	; (8000a98 <LCD_isBusy+0x1a4>)
 8000a32:	f7ff fc00 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a38:	2220      	movs	r2, #32
 8000a3a:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a3e:	2204      	movs	r2, #4
 8000a40:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000a48:	4912      	ldr	r1, [pc, #72]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a4a:	4813      	ldr	r0, [pc, #76]	; (8000a98 <LCD_isBusy+0x1a4>)
 8000a4c:	f7ff fbf3 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a52:	2240      	movs	r2, #64	; 0x40
 8000a54:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a58:	2204      	movs	r2, #4
 8000a5a:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000a62:	490c      	ldr	r1, [pc, #48]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <LCD_isBusy+0x1a4>)
 8000a66:	f7ff fbe6 	bl	8000236 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a6c:	2280      	movs	r2, #128	; 0x80
 8000a6e:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a72:	2204      	movs	r2, #4
 8000a74:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000a7c:	4905      	ldr	r1, [pc, #20]	; (8000a94 <LCD_isBusy+0x1a0>)
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <LCD_isBusy+0x1a4>)
 8000a80:	f7ff fbd9 	bl	8000236 <MCAL_GPIO_init>

	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8a:	4803      	ldr	r0, [pc, #12]	; (8000a98 <LCD_isBusy+0x1a4>)
 8000a8c:	f7ff fc6a 	bl	8000364 <MCAL_GPIO_WritePin>
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	2000003c 	.word	0x2000003c
 8000a98:	40010800 	.word	0x40010800

08000a9c <LCD_Kick>:

void LCD_Kick(void){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	/*
	 LCD_CTRL |= (1 << EN_SWITCH);
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
	 */
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa6:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <LCD_Kick+0x28>)
 8000aa8:	f7ff fc5c 	bl	8000364 <MCAL_GPIO_WritePin>
	delay(50);
 8000aac:	2032      	movs	r0, #50	; 0x32
 8000aae:	f7ff fdd1 	bl	8000654 <delay>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <LCD_Kick+0x28>)
 8000aba:	f7ff fc53 	bl	8000364 <MCAL_GPIO_WritePin>
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40010800 	.word	0x40010800

08000ac8 <LCD_ClearScreen>:

void LCD_ClearScreen(){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	LCD_WriteCommand(LCD_CLEAR_SCREEN);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f7ff fe9d 	bl	800080c <LCD_WriteCommand>
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4603      	mov	r3, r0
 8000ade:	460a      	mov	r2, r1
 8000ae0:	71fb      	strb	r3, [r7, #7]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d108      	bne.n	8000afe <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 8000aec:	79bb      	ldrb	r3, [r7, #6]
 8000aee:	2b0f      	cmp	r3, #15
 8000af0:	d805      	bhi.n	8000afe <LCD_GOTO_XY+0x28>
		{
			LCD_WriteCommand(LCD_BEGIN_AT_FIRST_ROW + position);
 8000af2:	79bb      	ldrb	r3, [r7, #6]
 8000af4:	3b80      	subs	r3, #128	; 0x80
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fe87 	bl	800080c <LCD_WriteCommand>
		}
	}
	if (line == 2)
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d108      	bne.n	8000b16 <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 8000b04:	79bb      	ldrb	r3, [r7, #6]
 8000b06:	2b0f      	cmp	r3, #15
 8000b08:	d805      	bhi.n	8000b16 <LCD_GOTO_XY+0x40>
		{
			LCD_WriteCommand(LCD_BEGIN_AT_SECOND_ROW + position);
 8000b0a:	79bb      	ldrb	r3, [r7, #6]
 8000b0c:	3b40      	subs	r3, #64	; 0x40
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fe7b 	bl	800080c <LCD_WriteCommand>
		}
	}
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <clock_init>:
#define SIX 0x02
#define SEVEN 0x19
#define EIGHT 0x00
#define NINE 0x10

void clock_init(){
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
	//Enable clock for GPIO PortA
	RCC_GPIOA_CLK_ENABLE();
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <clock_init+0x24>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <clock_init+0x24>)
 8000b2a:	f043 0304 	orr.w	r3, r3, #4
 8000b2e:	6193      	str	r3, [r2, #24]

	//Enable clock for GPIO PortB
	RCC_GPIOB_CLK_ENABLE();
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <clock_init+0x24>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a03      	ldr	r2, [pc, #12]	; (8000b44 <clock_init+0x24>)
 8000b36:	f043 0308 	orr.w	r3, r3, #8
 8000b3a:	6193      	str	r3, [r2, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	40021000 	.word	0x40021000

08000b48 <GPIO_init>:

void GPIO_init() {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0

	GPIO_PinConfig_t PinCfg;

	PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000b4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b52:	803b      	strh	r3, [r7, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000b54:	2304      	movs	r3, #4
 8000b56:	807b      	strh	r3, [r7, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_init(GPIOB, &PinCfg);
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4827      	ldr	r0, [pc, #156]	; (8000c00 <GPIO_init+0xb8>)
 8000b62:	f7ff fb68 	bl	8000236 <MCAL_GPIO_init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b6a:	803b      	strh	r3, [r7, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	807b      	strh	r3, [r7, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000b70:	2301      	movs	r3, #1
 8000b72:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_init(GPIOB, &PinCfg);
 8000b74:	463b      	mov	r3, r7
 8000b76:	4619      	mov	r1, r3
 8000b78:	4821      	ldr	r0, [pc, #132]	; (8000c00 <GPIO_init+0xb8>)
 8000b7a:	f7ff fb5c 	bl	8000236 <MCAL_GPIO_init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000b7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b82:	803b      	strh	r3, [r7, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000b84:	2304      	movs	r3, #4
 8000b86:	807b      	strh	r3, [r7, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_init(GPIOB, &PinCfg);
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	4619      	mov	r1, r3
 8000b90:	481b      	ldr	r0, [pc, #108]	; (8000c00 <GPIO_init+0xb8>)
 8000b92:	f7ff fb50 	bl	8000236 <MCAL_GPIO_init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9a:	803b      	strh	r3, [r7, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	807b      	strh	r3, [r7, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_init(GPIOB, &PinCfg);
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4815      	ldr	r0, [pc, #84]	; (8000c00 <GPIO_init+0xb8>)
 8000baa:	f7ff fb44 	bl	8000236 <MCAL_GPIO_init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000bae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb2:	803b      	strh	r3, [r7, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	807b      	strh	r3, [r7, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_init(GPIOB, &PinCfg);
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480f      	ldr	r0, [pc, #60]	; (8000c00 <GPIO_init+0xb8>)
 8000bc2:	f7ff fb38 	bl	8000236 <MCAL_GPIO_init>

	//============================

	//PA13 input HighZ Floating input (reset state)
	PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000bc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bca:	803b      	strh	r3, [r7, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	807b      	strh	r3, [r7, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_init(GPIOB, &PinCfg);
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <GPIO_init+0xb8>)
 8000bda:	f7ff fb2c 	bl	8000236 <MCAL_GPIO_init>

	//PB13 (output PUSH pull Mode)
	PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8000bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000be2:	803b      	strh	r3, [r7, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000be4:	2304      	movs	r3, #4
 8000be6:	807b      	strh	r3, [r7, #2]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000be8:	2301      	movs	r3, #1
 8000bea:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_init(GPIOB, &PinCfg);
 8000bec:	463b      	mov	r3, r7
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4803      	ldr	r0, [pc, #12]	; (8000c00 <GPIO_init+0xb8>)
 8000bf2:	f7ff fb20 	bl	8000236 <MCAL_GPIO_init>

}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40010c00 	.word	0x40010c00

08000c04 <main>:

int main(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
	clock_init();
 8000c0a:	f7ff ff89 	bl	8000b20 <clock_init>
	LCD_INIT();
 8000c0e:	f7ff fd3d 	bl	800068c <LCD_INIT>
	GPIO_init();
 8000c12:	f7ff ff99 	bl	8000b48 <GPIO_init>

	unsigned char LCD_DISPLAY [11] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 8000c16:	4a29      	ldr	r2, [pc, #164]	; (8000cbc <main+0xb8>)
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c1e:	c303      	stmia	r3!, {r0, r1}
 8000c20:	801a      	strh	r2, [r3, #0]
 8000c22:	3302      	adds	r3, #2
 8000c24:	0c12      	lsrs	r2, r2, #16
 8000c26:	701a      	strb	r2, [r3, #0]
	unsigned char DISPLAY [11] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
 8000c28:	4a25      	ldr	r2, [pc, #148]	; (8000cc0 <main+0xbc>)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c2e:	c303      	stmia	r3!, {r0, r1}
 8000c30:	801a      	strh	r2, [r3, #0]
 8000c32:	3302      	adds	r3, #2
 8000c34:	0c12      	lsrs	r2, r2, #16
 8000c36:	701a      	strb	r2, [r3, #0]
	for (unsigned char i = 0; i < 11; i++) {
 8000c38:	2300      	movs	r3, #0
 8000c3a:	77fb      	strb	r3, [r7, #31]
 8000c3c:	e01b      	b.n	8000c76 <main+0x72>
		LCD_WriteChar(LCD_DISPLAY[i]);
 8000c3e:	7ffb      	ldrb	r3, [r7, #31]
 8000c40:	f107 0220 	add.w	r2, r7, #32
 8000c44:	4413      	add	r3, r2
 8000c46:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fe02 	bl	8000854 <LCD_WriteChar>
		MCAL_GPIO_WritePort(GPIOB, DISPLAY[i] << 9); /* write data on to the LED port */
 8000c50:	7ffb      	ldrb	r3, [r7, #31]
 8000c52:	f107 0220 	add.w	r2, r7, #32
 8000c56:	4413      	add	r3, r2
 8000c58:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	025b      	lsls	r3, r3, #9
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	4619      	mov	r1, r3
 8000c64:	4817      	ldr	r0, [pc, #92]	; (8000cc4 <main+0xc0>)
 8000c66:	f7ff fb9b 	bl	80003a0 <MCAL_GPIO_WritePort>
		delay(100);
 8000c6a:	2064      	movs	r0, #100	; 0x64
 8000c6c:	f7ff fcf2 	bl	8000654 <delay>
	for (unsigned char i = 0; i < 11; i++) {
 8000c70:	7ffb      	ldrb	r3, [r7, #31]
 8000c72:	3301      	adds	r3, #1
 8000c74:	77fb      	strb	r3, [r7, #31]
 8000c76:	7ffb      	ldrb	r3, [r7, #31]
 8000c78:	2b0a      	cmp	r3, #10
 8000c7a:	d9e0      	bls.n	8000c3e <main+0x3a>
		/* wait for 1 second */
	}

	LCD_ClearScreen();
 8000c7c:	f7ff ff24 	bl	8000ac8 <LCD_ClearScreen>
	LCD_WriteString("Keypad is ready");
 8000c80:	4811      	ldr	r0, [pc, #68]	; (8000cc8 <main+0xc4>)
 8000c82:	f7ff fe0b 	bl	800089c <LCD_WriteString>
	Keypad_init();
 8000c86:	f7ff fb99 	bl	80003bc <Keypad_init>
	delay(30);
 8000c8a:	201e      	movs	r0, #30
 8000c8c:	f7ff fce2 	bl	8000654 <delay>
	LCD_ClearScreen();
 8000c90:	f7ff ff1a 	bl	8000ac8 <LCD_ClearScreen>

	unsigned char key_pressed;
	while(1){
		key_pressed = Keypad_getkey();
 8000c94:	f7ff fc14 	bl	80004c0 <Keypad_getkey>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	77bb      	strb	r3, [r7, #30]
		switch(key_pressed){
 8000c9c:	7fbb      	ldrb	r3, [r7, #30]
 8000c9e:	2b3f      	cmp	r3, #63	; 0x3f
 8000ca0:	d002      	beq.n	8000ca8 <main+0xa4>
 8000ca2:	2b41      	cmp	r3, #65	; 0x41
 8000ca4:	d008      	beq.n	8000cb8 <main+0xb4>
 8000ca6:	e002      	b.n	8000cae <main+0xaa>
		case 'A':
			break;
		case '?':
			LCD_ClearScreen();
 8000ca8:	f7ff ff0e 	bl	8000ac8 <LCD_ClearScreen>
			break;
 8000cac:	e005      	b.n	8000cba <main+0xb6>
		default:
			LCD_WriteChar(key_pressed);
 8000cae:	7fbb      	ldrb	r3, [r7, #30]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fdcf 	bl	8000854 <LCD_WriteChar>
			break;
 8000cb6:	e000      	b.n	8000cba <main+0xb6>
			break;
 8000cb8:	bf00      	nop
		key_pressed = Keypad_getkey();
 8000cba:	e7eb      	b.n	8000c94 <main+0x90>
 8000cbc:	08000d90 	.word	0x08000d90
 8000cc0:	08000d9c 	.word	0x08000d9c
 8000cc4:	40010c00 	.word	0x40010c00
 8000cc8:	08000d80 	.word	0x08000d80

08000ccc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cd0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd4:	480c      	ldr	r0, [pc, #48]	; (8000d08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cd6:	490d      	ldr	r1, [pc, #52]	; (8000d0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <LoopForever+0xe>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cec:	4c0a      	ldr	r4, [pc, #40]	; (8000d18 <LoopForever+0x16>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cfa:	f000 f811 	bl	8000d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cfe:	f7ff ff81 	bl	8000c04 <main>

08000d02 <LoopForever>:

LoopForever:
    b LoopForever
 8000d02:	e7fe      	b.n	8000d02 <LoopForever>
  ldr   r0, =_estack
 8000d04:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d0c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000d10:	08000db0 	.word	0x08000db0
  ldr r2, =_sbss
 8000d14:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000d18:	20000044 	.word	0x20000044

08000d1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d1c:	e7fe      	b.n	8000d1c <ADC1_2_IRQHandler>
	...

08000d20 <__libc_init_array>:
 8000d20:	b570      	push	{r4, r5, r6, lr}
 8000d22:	2500      	movs	r5, #0
 8000d24:	4e0c      	ldr	r6, [pc, #48]	; (8000d58 <__libc_init_array+0x38>)
 8000d26:	4c0d      	ldr	r4, [pc, #52]	; (8000d5c <__libc_init_array+0x3c>)
 8000d28:	1ba4      	subs	r4, r4, r6
 8000d2a:	10a4      	asrs	r4, r4, #2
 8000d2c:	42a5      	cmp	r5, r4
 8000d2e:	d109      	bne.n	8000d44 <__libc_init_array+0x24>
 8000d30:	f000 f81a 	bl	8000d68 <_init>
 8000d34:	2500      	movs	r5, #0
 8000d36:	4e0a      	ldr	r6, [pc, #40]	; (8000d60 <__libc_init_array+0x40>)
 8000d38:	4c0a      	ldr	r4, [pc, #40]	; (8000d64 <__libc_init_array+0x44>)
 8000d3a:	1ba4      	subs	r4, r4, r6
 8000d3c:	10a4      	asrs	r4, r4, #2
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d105      	bne.n	8000d4e <__libc_init_array+0x2e>
 8000d42:	bd70      	pop	{r4, r5, r6, pc}
 8000d44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d48:	4798      	blx	r3
 8000d4a:	3501      	adds	r5, #1
 8000d4c:	e7ee      	b.n	8000d2c <__libc_init_array+0xc>
 8000d4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d52:	4798      	blx	r3
 8000d54:	3501      	adds	r5, #1
 8000d56:	e7f2      	b.n	8000d3e <__libc_init_array+0x1e>
 8000d58:	08000da8 	.word	0x08000da8
 8000d5c:	08000da8 	.word	0x08000da8
 8000d60:	08000da8 	.word	0x08000da8
 8000d64:	08000dac 	.word	0x08000dac

08000d68 <_init>:
 8000d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6a:	bf00      	nop
 8000d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d6e:	bc08      	pop	{r3}
 8000d70:	469e      	mov	lr, r3
 8000d72:	4770      	bx	lr

08000d74 <_fini>:
 8000d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d76:	bf00      	nop
 8000d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d7a:	bc08      	pop	{r3}
 8000d7c:	469e      	mov	lr, r3
 8000d7e:	4770      	bx	lr
