
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e78  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000fa8  08000fa8  00010fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fc4  08000fc4  00010fcc  2**0
                  CONTENTS
  4 .ARM          00000000  08000fc4  08000fc4  00010fcc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fc4  08000fcc  00010fcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fc4  08000fc4  00010fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fc8  08000fc8  00010fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000fcc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000fcc  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fcc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003e88  00000000  00000000  00010ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009b5  00000000  00000000  00014e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a1c  00000000  00000000  00015832  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c8  00000000  00000000  00016250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000170  00000000  00000000  00016418  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000024c3  00000000  00000000  00016588  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002224  00000000  00000000  00018a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000091ba  00000000  00000000  0001ac6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00023e29  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000570  00000000  00000000  00023ea4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f90 	.word	0x08000f90

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f90 	.word	0x08000f90

08000170 <delay>:
 *  Author: AhmedEssam
 */ 

#include "lcd.h"

void delay(uint32_t n){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	int i, j;
	for(i = 0; i < n; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay+0x26>
		for(j = 0; j < 255; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	ddf9      	ble.n	8000184 <delay+0x14>
	for(i = 0; i < n; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	687a      	ldr	r2, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d8ef      	bhi.n	800017e <delay+0xe>
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_INIT>:

void LCD_INIT(){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	delay(20);
 80001ac:	2014      	movs	r0, #20
 80001ae:	f7ff ffdf 	bl	8000170 <delay>

	PinConfig.GPIO_PinNumber = RS_SWITCH;
 80001b2:	4b5b      	ldr	r3, [pc, #364]	; (8000320 <LCD_INIT+0x178>)
 80001b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001b8:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ba:	4b59      	ldr	r3, [pc, #356]	; (8000320 <LCD_INIT+0x178>)
 80001bc:	2204      	movs	r2, #4
 80001be:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 80001c0:	4b57      	ldr	r3, [pc, #348]	; (8000320 <LCD_INIT+0x178>)
 80001c2:	2201      	movs	r2, #1
 80001c4:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_CTRL, &PinConfig);
 80001c6:	4956      	ldr	r1, [pc, #344]	; (8000320 <LCD_INIT+0x178>)
 80001c8:	4856      	ldr	r0, [pc, #344]	; (8000324 <LCD_INIT+0x17c>)
 80001ca:	f000 fd72 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = RW_SWITCH;
 80001ce:	4b54      	ldr	r3, [pc, #336]	; (8000320 <LCD_INIT+0x178>)
 80001d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001d4:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001d6:	4b52      	ldr	r3, [pc, #328]	; (8000320 <LCD_INIT+0x178>)
 80001d8:	2204      	movs	r2, #4
 80001da:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 80001dc:	4b50      	ldr	r3, [pc, #320]	; (8000320 <LCD_INIT+0x178>)
 80001de:	2201      	movs	r2, #1
 80001e0:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_CTRL, &PinConfig);
 80001e2:	494f      	ldr	r1, [pc, #316]	; (8000320 <LCD_INIT+0x178>)
 80001e4:	484f      	ldr	r0, [pc, #316]	; (8000324 <LCD_INIT+0x17c>)
 80001e6:	f000 fd64 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = EN_SWITCH;
 80001ea:	4b4d      	ldr	r3, [pc, #308]	; (8000320 <LCD_INIT+0x178>)
 80001ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001f0:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001f2:	4b4b      	ldr	r3, [pc, #300]	; (8000320 <LCD_INIT+0x178>)
 80001f4:	2204      	movs	r2, #4
 80001f6:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 80001f8:	4b49      	ldr	r3, [pc, #292]	; (8000320 <LCD_INIT+0x178>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_CTRL, &PinConfig);
 80001fe:	4948      	ldr	r1, [pc, #288]	; (8000320 <LCD_INIT+0x178>)
 8000200:	4848      	ldr	r0, [pc, #288]	; (8000324 <LCD_INIT+0x17c>)
 8000202:	f000 fd56 	bl	8000cb2 <MCAL_GPIO_init>

	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000206:	2200      	movs	r2, #0
 8000208:	f44f 7100 	mov.w	r1, #512	; 0x200
 800020c:	4845      	ldr	r0, [pc, #276]	; (8000324 <LCD_INIT+0x17c>)
 800020e:	f000 fdd0 	bl	8000db2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000212:	2200      	movs	r2, #0
 8000214:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000218:	4842      	ldr	r0, [pc, #264]	; (8000324 <LCD_INIT+0x17c>)
 800021a:	f000 fdca 	bl	8000db2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 800021e:	2200      	movs	r2, #0
 8000220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000224:	483f      	ldr	r0, [pc, #252]	; (8000324 <LCD_INIT+0x17c>)
 8000226:	f000 fdc4 	bl	8000db2 <MCAL_GPIO_WritePin>

	PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800022a:	4b3d      	ldr	r3, [pc, #244]	; (8000320 <LCD_INIT+0x178>)
 800022c:	2201      	movs	r2, #1
 800022e:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000230:	4b3b      	ldr	r3, [pc, #236]	; (8000320 <LCD_INIT+0x178>)
 8000232:	2204      	movs	r2, #4
 8000234:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000236:	4b3a      	ldr	r3, [pc, #232]	; (8000320 <LCD_INIT+0x178>)
 8000238:	2201      	movs	r2, #1
 800023a:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 800023c:	4938      	ldr	r1, [pc, #224]	; (8000320 <LCD_INIT+0x178>)
 800023e:	4839      	ldr	r0, [pc, #228]	; (8000324 <LCD_INIT+0x17c>)
 8000240:	f000 fd37 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 8000244:	4b36      	ldr	r3, [pc, #216]	; (8000320 <LCD_INIT+0x178>)
 8000246:	2202      	movs	r2, #2
 8000248:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800024a:	4b35      	ldr	r3, [pc, #212]	; (8000320 <LCD_INIT+0x178>)
 800024c:	2204      	movs	r2, #4
 800024e:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000250:	4b33      	ldr	r3, [pc, #204]	; (8000320 <LCD_INIT+0x178>)
 8000252:	2201      	movs	r2, #1
 8000254:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000256:	4932      	ldr	r1, [pc, #200]	; (8000320 <LCD_INIT+0x178>)
 8000258:	4832      	ldr	r0, [pc, #200]	; (8000324 <LCD_INIT+0x17c>)
 800025a:	f000 fd2a 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 800025e:	4b30      	ldr	r3, [pc, #192]	; (8000320 <LCD_INIT+0x178>)
 8000260:	2204      	movs	r2, #4
 8000262:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000264:	4b2e      	ldr	r3, [pc, #184]	; (8000320 <LCD_INIT+0x178>)
 8000266:	2204      	movs	r2, #4
 8000268:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 800026a:	4b2d      	ldr	r3, [pc, #180]	; (8000320 <LCD_INIT+0x178>)
 800026c:	2201      	movs	r2, #1
 800026e:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000270:	492b      	ldr	r1, [pc, #172]	; (8000320 <LCD_INIT+0x178>)
 8000272:	482c      	ldr	r0, [pc, #176]	; (8000324 <LCD_INIT+0x17c>)
 8000274:	f000 fd1d 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 8000278:	4b29      	ldr	r3, [pc, #164]	; (8000320 <LCD_INIT+0x178>)
 800027a:	2208      	movs	r2, #8
 800027c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800027e:	4b28      	ldr	r3, [pc, #160]	; (8000320 <LCD_INIT+0x178>)
 8000280:	2204      	movs	r2, #4
 8000282:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000284:	4b26      	ldr	r3, [pc, #152]	; (8000320 <LCD_INIT+0x178>)
 8000286:	2201      	movs	r2, #1
 8000288:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 800028a:	4925      	ldr	r1, [pc, #148]	; (8000320 <LCD_INIT+0x178>)
 800028c:	4825      	ldr	r0, [pc, #148]	; (8000324 <LCD_INIT+0x17c>)
 800028e:	f000 fd10 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000292:	4b23      	ldr	r3, [pc, #140]	; (8000320 <LCD_INIT+0x178>)
 8000294:	2210      	movs	r2, #16
 8000296:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000298:	4b21      	ldr	r3, [pc, #132]	; (8000320 <LCD_INIT+0x178>)
 800029a:	2204      	movs	r2, #4
 800029c:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 800029e:	4b20      	ldr	r3, [pc, #128]	; (8000320 <LCD_INIT+0x178>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 80002a4:	491e      	ldr	r1, [pc, #120]	; (8000320 <LCD_INIT+0x178>)
 80002a6:	481f      	ldr	r0, [pc, #124]	; (8000324 <LCD_INIT+0x17c>)
 80002a8:	f000 fd03 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 80002ac:	4b1c      	ldr	r3, [pc, #112]	; (8000320 <LCD_INIT+0x178>)
 80002ae:	2220      	movs	r2, #32
 80002b0:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002b2:	4b1b      	ldr	r3, [pc, #108]	; (8000320 <LCD_INIT+0x178>)
 80002b4:	2204      	movs	r2, #4
 80002b6:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 80002b8:	4b19      	ldr	r3, [pc, #100]	; (8000320 <LCD_INIT+0x178>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 80002be:	4918      	ldr	r1, [pc, #96]	; (8000320 <LCD_INIT+0x178>)
 80002c0:	4818      	ldr	r0, [pc, #96]	; (8000324 <LCD_INIT+0x17c>)
 80002c2:	f000 fcf6 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <LCD_INIT+0x178>)
 80002c8:	2240      	movs	r2, #64	; 0x40
 80002ca:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002cc:	4b14      	ldr	r3, [pc, #80]	; (8000320 <LCD_INIT+0x178>)
 80002ce:	2204      	movs	r2, #4
 80002d0:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 80002d2:	4b13      	ldr	r3, [pc, #76]	; (8000320 <LCD_INIT+0x178>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 80002d8:	4911      	ldr	r1, [pc, #68]	; (8000320 <LCD_INIT+0x178>)
 80002da:	4812      	ldr	r0, [pc, #72]	; (8000324 <LCD_INIT+0x17c>)
 80002dc:	f000 fce9 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <LCD_INIT+0x178>)
 80002e2:	2280      	movs	r2, #128	; 0x80
 80002e4:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <LCD_INIT+0x178>)
 80002e8:	2204      	movs	r2, #4
 80002ea:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <LCD_INIT+0x178>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 80002f2:	490b      	ldr	r1, [pc, #44]	; (8000320 <LCD_INIT+0x178>)
 80002f4:	480b      	ldr	r0, [pc, #44]	; (8000324 <LCD_INIT+0x17c>)
 80002f6:	f000 fcdc 	bl	8000cb2 <MCAL_GPIO_init>

	delay(15);
 80002fa:	200f      	movs	r0, #15
 80002fc:	f7ff ff38 	bl	8000170 <delay>
	LCD_ClearScreen();
 8000300:	f000 f970 	bl	80005e4 <LCD_ClearScreen>
	LCD_WriteCommand(LCD_FUNCTION_8BIT_2LINES);
 8000304:	2038      	movs	r0, #56	; 0x38
 8000306:	f000 f80f 	bl	8000328 <LCD_WriteCommand>

	LCD_WriteCommand(LCD_ENTRY_MODE);
 800030a:	2006      	movs	r0, #6
 800030c:	f000 f80c 	bl	8000328 <LCD_WriteCommand>
	LCD_WriteCommand(LCD_BEGIN_AT_FIRST_ROW);
 8000310:	2080      	movs	r0, #128	; 0x80
 8000312:	f000 f809 	bl	8000328 <LCD_WriteCommand>
	LCD_WriteCommand(LCD_DISP_ON_CURSOR_BLINK);
 8000316:	200f      	movs	r0, #15
 8000318:	f000 f806 	bl	8000328 <LCD_WriteCommand>
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000020 	.word	0x20000020
 8000324:	40010800 	.word	0x40010800

08000328 <LCD_WriteCommand>:

void LCD_WriteCommand(unsigned char command){
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
		LCD_PORT = command;
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
		_delay_ms(1);
		LCD_lcd_kick();
	 */
	LCD_isBusy();
 8000332:	f000 f86d 	bl	8000410 <LCD_isBusy>
	MCAL_GPIO_WritePort(LCD_PORT, command);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	b29b      	uxth	r3, r3
 800033a:	4619      	mov	r1, r3
 800033c:	480b      	ldr	r0, [pc, #44]	; (800036c <LCD_WriteCommand+0x44>)
 800033e:	f000 fd56 	bl	8000dee <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000348:	4808      	ldr	r0, [pc, #32]	; (800036c <LCD_WriteCommand+0x44>)
 800034a:	f000 fd32 	bl	8000db2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800034e:	2200      	movs	r2, #0
 8000350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000354:	4805      	ldr	r0, [pc, #20]	; (800036c <LCD_WriteCommand+0x44>)
 8000356:	f000 fd2c 	bl	8000db2 <MCAL_GPIO_WritePin>
	delay(1);
 800035a:	2001      	movs	r0, #1
 800035c:	f7ff ff08 	bl	8000170 <delay>
	LCD_Kick();
 8000360:	f000 f92a 	bl	80005b8 <LCD_Kick>
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40010800 	.word	0x40010800

08000370 <LCD_WriteChar>:

void LCD_WriteChar(unsigned char data){
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]
		LCD_CTRL &= ~(1 << RW_SWITCH);
		LCD_CTRL |= (1 << RS_SWITCH);
		_delay_ms(1);
		LCD_lcd_kick();
	 */
	LCD_isBusy();
 800037a:	f000 f849 	bl	8000410 <LCD_isBusy>
	MCAL_GPIO_WritePort(LCD_PORT, data);
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	b29b      	uxth	r3, r3
 8000382:	4619      	mov	r1, r3
 8000384:	480b      	ldr	r0, [pc, #44]	; (80003b4 <LCD_WriteChar+0x44>)
 8000386:	f000 fd32 	bl	8000dee <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000390:	4808      	ldr	r0, [pc, #32]	; (80003b4 <LCD_WriteChar+0x44>)
 8000392:	f000 fd0e 	bl	8000db2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000396:	2201      	movs	r2, #1
 8000398:	f44f 7180 	mov.w	r1, #256	; 0x100
 800039c:	4805      	ldr	r0, [pc, #20]	; (80003b4 <LCD_WriteChar+0x44>)
 800039e:	f000 fd08 	bl	8000db2 <MCAL_GPIO_WritePin>
	delay(1);
 80003a2:	2001      	movs	r0, #1
 80003a4:	f7ff fee4 	bl	8000170 <delay>
	LCD_Kick();
 80003a8:	f000 f906 	bl	80005b8 <LCD_Kick>
}
 80003ac:	bf00      	nop
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40010800 	.word	0x40010800

080003b8 <LCD_WriteString>:

void LCD_WriteString(char* string){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	int count = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 80003c4:	e01c      	b.n	8000400 <LCD_WriteString+0x48>
		count++;
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3301      	adds	r3, #1
 80003ca:	60fb      	str	r3, [r7, #12]
		LCD_WriteChar(*string++);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	1c5a      	adds	r2, r3, #1
 80003d0:	607a      	str	r2, [r7, #4]
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff ffcb 	bl	8000370 <LCD_WriteChar>
		if (count == 16)
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	2b10      	cmp	r3, #16
 80003de:	d104      	bne.n	80003ea <LCD_WriteString+0x32>
		{
			LCD_GOTO_XY(2,0);
 80003e0:	2100      	movs	r1, #0
 80003e2:	2002      	movs	r0, #2
 80003e4:	f000 f905 	bl	80005f2 <LCD_GOTO_XY>
 80003e8:	e00a      	b.n	8000400 <LCD_WriteString+0x48>
		}
		else if (count == 32)
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	2b20      	cmp	r3, #32
 80003ee:	d107      	bne.n	8000400 <LCD_WriteString+0x48>
		{
			LCD_ClearScreen();
 80003f0:	f000 f8f8 	bl	80005e4 <LCD_ClearScreen>
			LCD_GOTO_XY(1,0);
 80003f4:	2100      	movs	r1, #0
 80003f6:	2001      	movs	r0, #1
 80003f8:	f000 f8fb 	bl	80005f2 <LCD_GOTO_XY>
			count = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d1de      	bne.n	80003c6 <LCD_WriteString+0xe>
		}
	}
}
 8000408:	bf00      	nop
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <LCD_isBusy>:

void LCD_isBusy(void){
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	LCD_CTRL &= ~(1 << RS_SWITCH);
	LCD_lcd_kick();
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
	LCD_CTRL &= ~(1 << RW_SWITCH);
	 */
	PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000414:	4b66      	ldr	r3, [pc, #408]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000416:	2201      	movs	r2, #1
 8000418:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLOAT;
 800041a:	4b65      	ldr	r3, [pc, #404]	; (80005b0 <LCD_isBusy+0x1a0>)
 800041c:	2201      	movs	r2, #1
 800041e:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000420:	4963      	ldr	r1, [pc, #396]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000422:	4864      	ldr	r0, [pc, #400]	; (80005b4 <LCD_isBusy+0x1a4>)
 8000424:	f000 fc45 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 8000428:	4b61      	ldr	r3, [pc, #388]	; (80005b0 <LCD_isBusy+0x1a0>)
 800042a:	2202      	movs	r2, #2
 800042c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLOAT;
 800042e:	4b60      	ldr	r3, [pc, #384]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000430:	2201      	movs	r2, #1
 8000432:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000434:	495e      	ldr	r1, [pc, #376]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000436:	485f      	ldr	r0, [pc, #380]	; (80005b4 <LCD_isBusy+0x1a4>)
 8000438:	f000 fc3b 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 800043c:	4b5c      	ldr	r3, [pc, #368]	; (80005b0 <LCD_isBusy+0x1a0>)
 800043e:	2204      	movs	r2, #4
 8000440:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLOAT;
 8000442:	4b5b      	ldr	r3, [pc, #364]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000444:	2201      	movs	r2, #1
 8000446:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000448:	4959      	ldr	r1, [pc, #356]	; (80005b0 <LCD_isBusy+0x1a0>)
 800044a:	485a      	ldr	r0, [pc, #360]	; (80005b4 <LCD_isBusy+0x1a4>)
 800044c:	f000 fc31 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 8000450:	4b57      	ldr	r3, [pc, #348]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000452:	2208      	movs	r2, #8
 8000454:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLOAT;
 8000456:	4b56      	ldr	r3, [pc, #344]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000458:	2201      	movs	r2, #1
 800045a:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 800045c:	4954      	ldr	r1, [pc, #336]	; (80005b0 <LCD_isBusy+0x1a0>)
 800045e:	4855      	ldr	r0, [pc, #340]	; (80005b4 <LCD_isBusy+0x1a4>)
 8000460:	f000 fc27 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000464:	4b52      	ldr	r3, [pc, #328]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000466:	2210      	movs	r2, #16
 8000468:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLOAT;
 800046a:	4b51      	ldr	r3, [pc, #324]	; (80005b0 <LCD_isBusy+0x1a0>)
 800046c:	2201      	movs	r2, #1
 800046e:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000470:	494f      	ldr	r1, [pc, #316]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000472:	4850      	ldr	r0, [pc, #320]	; (80005b4 <LCD_isBusy+0x1a4>)
 8000474:	f000 fc1d 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000478:	4b4d      	ldr	r3, [pc, #308]	; (80005b0 <LCD_isBusy+0x1a0>)
 800047a:	2220      	movs	r2, #32
 800047c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLOAT;
 800047e:	4b4c      	ldr	r3, [pc, #304]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000480:	2201      	movs	r2, #1
 8000482:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000484:	494a      	ldr	r1, [pc, #296]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000486:	484b      	ldr	r0, [pc, #300]	; (80005b4 <LCD_isBusy+0x1a4>)
 8000488:	f000 fc13 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 800048c:	4b48      	ldr	r3, [pc, #288]	; (80005b0 <LCD_isBusy+0x1a0>)
 800048e:	2240      	movs	r2, #64	; 0x40
 8000490:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLOAT;
 8000492:	4b47      	ldr	r3, [pc, #284]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000494:	2201      	movs	r2, #1
 8000496:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000498:	4945      	ldr	r1, [pc, #276]	; (80005b0 <LCD_isBusy+0x1a0>)
 800049a:	4846      	ldr	r0, [pc, #280]	; (80005b4 <LCD_isBusy+0x1a4>)
 800049c:	f000 fc09 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80004a0:	4b43      	ldr	r3, [pc, #268]	; (80005b0 <LCD_isBusy+0x1a0>)
 80004a2:	2280      	movs	r2, #128	; 0x80
 80004a4:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLOAT;
 80004a6:	4b42      	ldr	r3, [pc, #264]	; (80005b0 <LCD_isBusy+0x1a0>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 80004ac:	4940      	ldr	r1, [pc, #256]	; (80005b0 <LCD_isBusy+0x1a0>)
 80004ae:	4841      	ldr	r0, [pc, #260]	; (80005b4 <LCD_isBusy+0x1a4>)
 80004b0:	f000 fbff 	bl	8000cb2 <MCAL_GPIO_init>


	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_SET);
 80004b4:	2201      	movs	r2, #1
 80004b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ba:	483e      	ldr	r0, [pc, #248]	; (80005b4 <LCD_isBusy+0x1a4>)
 80004bc:	f000 fc79 	bl	8000db2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c6:	483b      	ldr	r0, [pc, #236]	; (80005b4 <LCD_isBusy+0x1a4>)
 80004c8:	f000 fc73 	bl	8000db2 <MCAL_GPIO_WritePin>

	LCD_Kick();
 80004cc:	f000 f874 	bl	80005b8 <LCD_Kick>

	PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80004d0:	4b37      	ldr	r3, [pc, #220]	; (80005b0 <LCD_isBusy+0x1a0>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004d6:	4b36      	ldr	r3, [pc, #216]	; (80005b0 <LCD_isBusy+0x1a0>)
 80004d8:	2204      	movs	r2, #4
 80004da:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 80004dc:	4b34      	ldr	r3, [pc, #208]	; (80005b0 <LCD_isBusy+0x1a0>)
 80004de:	2201      	movs	r2, #1
 80004e0:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 80004e2:	4933      	ldr	r1, [pc, #204]	; (80005b0 <LCD_isBusy+0x1a0>)
 80004e4:	4833      	ldr	r0, [pc, #204]	; (80005b4 <LCD_isBusy+0x1a4>)
 80004e6:	f000 fbe4 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 80004ea:	4b31      	ldr	r3, [pc, #196]	; (80005b0 <LCD_isBusy+0x1a0>)
 80004ec:	2202      	movs	r2, #2
 80004ee:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004f0:	4b2f      	ldr	r3, [pc, #188]	; (80005b0 <LCD_isBusy+0x1a0>)
 80004f2:	2204      	movs	r2, #4
 80004f4:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 80004f6:	4b2e      	ldr	r3, [pc, #184]	; (80005b0 <LCD_isBusy+0x1a0>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 80004fc:	492c      	ldr	r1, [pc, #176]	; (80005b0 <LCD_isBusy+0x1a0>)
 80004fe:	482d      	ldr	r0, [pc, #180]	; (80005b4 <LCD_isBusy+0x1a4>)
 8000500:	f000 fbd7 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 8000504:	4b2a      	ldr	r3, [pc, #168]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000506:	2204      	movs	r2, #4
 8000508:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800050a:	4b29      	ldr	r3, [pc, #164]	; (80005b0 <LCD_isBusy+0x1a0>)
 800050c:	2204      	movs	r2, #4
 800050e:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000510:	4b27      	ldr	r3, [pc, #156]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000512:	2201      	movs	r2, #1
 8000514:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000516:	4926      	ldr	r1, [pc, #152]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000518:	4826      	ldr	r0, [pc, #152]	; (80005b4 <LCD_isBusy+0x1a4>)
 800051a:	f000 fbca 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 800051e:	4b24      	ldr	r3, [pc, #144]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000520:	2208      	movs	r2, #8
 8000522:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000524:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000526:	2204      	movs	r2, #4
 8000528:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 800052a:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <LCD_isBusy+0x1a0>)
 800052c:	2201      	movs	r2, #1
 800052e:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000530:	491f      	ldr	r1, [pc, #124]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000532:	4820      	ldr	r0, [pc, #128]	; (80005b4 <LCD_isBusy+0x1a4>)
 8000534:	f000 fbbd 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000538:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <LCD_isBusy+0x1a0>)
 800053a:	2210      	movs	r2, #16
 800053c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800053e:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000540:	2204      	movs	r2, #4
 8000542:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000544:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000546:	2201      	movs	r2, #1
 8000548:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 800054a:	4919      	ldr	r1, [pc, #100]	; (80005b0 <LCD_isBusy+0x1a0>)
 800054c:	4819      	ldr	r0, [pc, #100]	; (80005b4 <LCD_isBusy+0x1a4>)
 800054e:	f000 fbb0 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000554:	2220      	movs	r2, #32
 8000556:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <LCD_isBusy+0x1a0>)
 800055a:	2204      	movs	r2, #4
 800055c:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000560:	2201      	movs	r2, #1
 8000562:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000564:	4912      	ldr	r1, [pc, #72]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000566:	4813      	ldr	r0, [pc, #76]	; (80005b4 <LCD_isBusy+0x1a4>)
 8000568:	f000 fba3 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 800056c:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <LCD_isBusy+0x1a0>)
 800056e:	2240      	movs	r2, #64	; 0x40
 8000570:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000574:	2204      	movs	r2, #4
 8000576:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000578:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <LCD_isBusy+0x1a0>)
 800057a:	2201      	movs	r2, #1
 800057c:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 800057e:	490c      	ldr	r1, [pc, #48]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000580:	480c      	ldr	r0, [pc, #48]	; (80005b4 <LCD_isBusy+0x1a4>)
 8000582:	f000 fb96 	bl	8000cb2 <MCAL_GPIO_init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000588:	2280      	movs	r2, #128	; 0x80
 800058a:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <LCD_isBusy+0x1a0>)
 800058e:	2204      	movs	r2, #4
 8000590:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <LCD_isBusy+0x1a0>)
 8000594:	2201      	movs	r2, #1
 8000596:	809a      	strh	r2, [r3, #4]
	MCAL_GPIO_init(LCD_PORT, &PinConfig);
 8000598:	4905      	ldr	r1, [pc, #20]	; (80005b0 <LCD_isBusy+0x1a0>)
 800059a:	4806      	ldr	r0, [pc, #24]	; (80005b4 <LCD_isBusy+0x1a4>)
 800059c:	f000 fb89 	bl	8000cb2 <MCAL_GPIO_init>

	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <LCD_isBusy+0x1a4>)
 80005a8:	f000 fc03 	bl	8000db2 <MCAL_GPIO_WritePin>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000020 	.word	0x20000020
 80005b4:	40010800 	.word	0x40010800

080005b8 <LCD_Kick>:

void LCD_Kick(void){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	/*
	 LCD_CTRL |= (1 << EN_SWITCH);
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
	 */
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c2:	4807      	ldr	r0, [pc, #28]	; (80005e0 <LCD_Kick+0x28>)
 80005c4:	f000 fbf5 	bl	8000db2 <MCAL_GPIO_WritePin>
	delay(50);
 80005c8:	2032      	movs	r0, #50	; 0x32
 80005ca:	f7ff fdd1 	bl	8000170 <delay>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <LCD_Kick+0x28>)
 80005d6:	f000 fbec 	bl	8000db2 <MCAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40010800 	.word	0x40010800

080005e4 <LCD_ClearScreen>:

void LCD_ClearScreen(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	LCD_WriteCommand(LCD_CLEAR_SCREEN);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f7ff fe9d 	bl	8000328 <LCD_WriteCommand>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	4603      	mov	r3, r0
 80005fa:	460a      	mov	r2, r1
 80005fc:	71fb      	strb	r3, [r7, #7]
 80005fe:	4613      	mov	r3, r2
 8000600:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d108      	bne.n	800061a <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	2b0f      	cmp	r3, #15
 800060c:	d805      	bhi.n	800061a <LCD_GOTO_XY+0x28>
		{
			LCD_WriteCommand(LCD_BEGIN_AT_FIRST_ROW + position);
 800060e:	79bb      	ldrb	r3, [r7, #6]
 8000610:	3b80      	subs	r3, #128	; 0x80
 8000612:	b2db      	uxtb	r3, r3
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff fe87 	bl	8000328 <LCD_WriteCommand>
		}
	}
	if (line == 2)
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b02      	cmp	r3, #2
 800061e:	d108      	bne.n	8000632 <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	2b0f      	cmp	r3, #15
 8000624:	d805      	bhi.n	8000632 <LCD_GOTO_XY+0x40>
		{
			LCD_WriteCommand(LCD_BEGIN_AT_SECOND_ROW + position);
 8000626:	79bb      	ldrb	r3, [r7, #6]
 8000628:	3b40      	subs	r3, #64	; 0x40
 800062a:	b2db      	uxtb	r3, r3
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff fe7b 	bl	8000328 <LCD_WriteCommand>
		}
	}
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <NVIC_Enable>:

//====================================================================
//						Generic Functions
//====================================================================

void NVIC_Enable(uint16_t IRQ){
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	2b0f      	cmp	r3, #15
 800064a:	d854      	bhi.n	80006f6 <NVIC_Enable+0xba>
 800064c:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <NVIC_Enable+0x18>)
 800064e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000652:	bf00      	nop
 8000654:	08000695 	.word	0x08000695
 8000658:	080006a3 	.word	0x080006a3
 800065c:	080006b1 	.word	0x080006b1
 8000660:	080006bf 	.word	0x080006bf
 8000664:	080006cd 	.word	0x080006cd
 8000668:	080006db 	.word	0x080006db
 800066c:	080006db 	.word	0x080006db
 8000670:	080006db 	.word	0x080006db
 8000674:	080006db 	.word	0x080006db
 8000678:	080006db 	.word	0x080006db
 800067c:	080006e9 	.word	0x080006e9
 8000680:	080006e9 	.word	0x080006e9
 8000684:	080006e9 	.word	0x080006e9
 8000688:	080006e9 	.word	0x080006e9
 800068c:	080006e9 	.word	0x080006e9
 8000690:	080006e9 	.word	0x080006e9
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8000694:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <NVIC_Enable+0xc4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a19      	ldr	r2, [pc, #100]	; (8000700 <NVIC_Enable+0xc4>)
 800069a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069e:	6013      	str	r3, [r2, #0]
		break;
 80006a0:	e029      	b.n	80006f6 <NVIC_Enable+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <NVIC_Enable+0xc4>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a16      	ldr	r2, [pc, #88]	; (8000700 <NVIC_Enable+0xc4>)
 80006a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ac:	6013      	str	r3, [r2, #0]
		break;
 80006ae:	e022      	b.n	80006f6 <NVIC_Enable+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 80006b0:	4b13      	ldr	r3, [pc, #76]	; (8000700 <NVIC_Enable+0xc4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a12      	ldr	r2, [pc, #72]	; (8000700 <NVIC_Enable+0xc4>)
 80006b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ba:	6013      	str	r3, [r2, #0]
		break;
 80006bc:	e01b      	b.n	80006f6 <NVIC_Enable+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <NVIC_Enable+0xc4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <NVIC_Enable+0xc4>)
 80006c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006c8:	6013      	str	r3, [r2, #0]
		break;
 80006ca:	e014      	b.n	80006f6 <NVIC_Enable+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <NVIC_Enable+0xc4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <NVIC_Enable+0xc4>)
 80006d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006d6:	6013      	str	r3, [r2, #0]
		break;
 80006d8:	e00d      	b.n	80006f6 <NVIC_Enable+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI9_5_Enable;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <NVIC_Enable+0xc4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <NVIC_Enable+0xc4>)
 80006e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006e4:	6013      	str	r3, [r2, #0]
		break;
 80006e6:	e006      	b.n	80006f6 <NVIC_Enable+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI15_10_Enable;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <NVIC_Enable+0xc8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a05      	ldr	r2, [pc, #20]	; (8000704 <NVIC_Enable+0xc8>)
 80006ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f2:	6013      	str	r3, [r2, #0]
		break;
 80006f4:	bf00      	nop
	}
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	e000e100 	.word	0xe000e100
 8000704:	e000e104 	.word	0xe000e104

08000708 <NVIC_Disable>:

void NVIC_Disable(uint16_t IRQ){
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	2b0f      	cmp	r3, #15
 8000716:	d854      	bhi.n	80007c2 <NVIC_Disable+0xba>
 8000718:	a201      	add	r2, pc, #4	; (adr r2, 8000720 <NVIC_Disable+0x18>)
 800071a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071e:	bf00      	nop
 8000720:	08000761 	.word	0x08000761
 8000724:	0800076f 	.word	0x0800076f
 8000728:	0800077d 	.word	0x0800077d
 800072c:	0800078b 	.word	0x0800078b
 8000730:	08000799 	.word	0x08000799
 8000734:	080007a7 	.word	0x080007a7
 8000738:	080007a7 	.word	0x080007a7
 800073c:	080007a7 	.word	0x080007a7
 8000740:	080007a7 	.word	0x080007a7
 8000744:	080007a7 	.word	0x080007a7
 8000748:	080007b5 	.word	0x080007b5
 800074c:	080007b5 	.word	0x080007b5
 8000750:	080007b5 	.word	0x080007b5
 8000754:	080007b5 	.word	0x080007b5
 8000758:	080007b5 	.word	0x080007b5
 800075c:	080007b5 	.word	0x080007b5
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <NVIC_Disable+0xc4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a19      	ldr	r2, [pc, #100]	; (80007cc <NVIC_Disable+0xc4>)
 8000766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076a:	6013      	str	r3, [r2, #0]
		break;
 800076c:	e029      	b.n	80007c2 <NVIC_Disable+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <NVIC_Disable+0xc4>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a16      	ldr	r2, [pc, #88]	; (80007cc <NVIC_Disable+0xc4>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6013      	str	r3, [r2, #0]
		break;
 800077a:	e022      	b.n	80007c2 <NVIC_Disable+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <NVIC_Disable+0xc4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a12      	ldr	r2, [pc, #72]	; (80007cc <NVIC_Disable+0xc4>)
 8000782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000786:	6013      	str	r3, [r2, #0]
		break;
 8000788:	e01b      	b.n	80007c2 <NVIC_Disable+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <NVIC_Disable+0xc4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <NVIC_Disable+0xc4>)
 8000790:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000794:	6013      	str	r3, [r2, #0]
		break;
 8000796:	e014      	b.n	80007c2 <NVIC_Disable+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <NVIC_Disable+0xc4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <NVIC_Disable+0xc4>)
 800079e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007a2:	6013      	str	r3, [r2, #0]
		break;
 80007a4:	e00d      	b.n	80007c2 <NVIC_Disable+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI9_5_Disable;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <NVIC_Disable+0xc4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <NVIC_Disable+0xc4>)
 80007ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007b0:	6013      	str	r3, [r2, #0]
		break;
 80007b2:	e006      	b.n	80007c2 <NVIC_Disable+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI15_10_Disable;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <NVIC_Disable+0xc8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <NVIC_Disable+0xc8>)
 80007ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007be:	6013      	str	r3, [r2, #0]
		break;
 80007c0:	bf00      	nop
	}
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	e000e180 	.word	0xe000e180
 80007d0:	e000e184 	.word	0xe000e184

080007d4 <Configure_EXTI>:

void Configure_EXTI(EXTI_PinConfig_t *EXTI_Config){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	//-----------------------------
	//1) Configure GPIO to be AF Input >> Floating Input
	//-----------------------------
	GPIO_PinConfig_t PinConfig;
	PinConfig.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	891b      	ldrh	r3, [r3, #8]
 80007e0:	813b      	strh	r3, [r7, #8]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_AF;
 80007e2:	2308      	movs	r3, #8
 80007e4:	817b      	strh	r3, [r7, #10]
	MCAL_GPIO_init(EXTI_Config->EXTI_PIN.GPIOx, &PinConfig);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	f107 0208 	add.w	r2, r7, #8
 80007ee:	4611      	mov	r1, r2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fa5e 	bl	8000cb2 <MCAL_GPIO_init>

	//-----------------------------
	//2) Route AFIO to Corresponding EXTI Input Line
	//-----------------------------
	uint8_t AFIO_EXTICR_Index = EXTI_Config->EXTI_PIN.EXTI_InputLineX / 4;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	089b      	lsrs	r3, r3, #2
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_Position = (EXTI_Config->EXTI_PIN.EXTI_InputLineX % 4) * 4;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	f003 0303 	and.w	r3, r3, #3
 800080a:	b2db      	uxtb	r3, r3
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	73bb      	strb	r3, [r7, #14]

	//Reset then Set AFIO->EXTICR Register
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF << AFIO_EXTICR_Position);
 8000810:	4a61      	ldr	r2, [pc, #388]	; (8000998 <Configure_EXTI+0x1c4>)
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	3302      	adds	r3, #2
 8000816:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800081a:	7bbb      	ldrb	r3, [r7, #14]
 800081c:	210f      	movs	r1, #15
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	43db      	mvns	r3, r3
 8000824:	4618      	mov	r0, r3
 8000826:	495c      	ldr	r1, [pc, #368]	; (8000998 <Configure_EXTI+0x1c4>)
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	4002      	ands	r2, r0
 800082c:	3302      	adds	r3, #2
 800082e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_Index] |= ((AFIO_GPIOx_Mapping(EXTI_Config->EXTI_PIN.GPIOx) & 0xF) << AFIO_EXTICR_Position);
 8000832:	4a59      	ldr	r2, [pc, #356]	; (8000998 <Configure_EXTI+0x1c4>)
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	3302      	adds	r3, #2
 8000838:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	4956      	ldr	r1, [pc, #344]	; (800099c <Configure_EXTI+0x1c8>)
 8000842:	428b      	cmp	r3, r1
 8000844:	d016      	beq.n	8000874 <Configure_EXTI+0xa0>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	4955      	ldr	r1, [pc, #340]	; (80009a0 <Configure_EXTI+0x1cc>)
 800084c:	428b      	cmp	r3, r1
 800084e:	d00f      	beq.n	8000870 <Configure_EXTI+0x9c>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	4953      	ldr	r1, [pc, #332]	; (80009a4 <Configure_EXTI+0x1d0>)
 8000856:	428b      	cmp	r3, r1
 8000858:	d008      	beq.n	800086c <Configure_EXTI+0x98>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	4952      	ldr	r1, [pc, #328]	; (80009a8 <Configure_EXTI+0x1d4>)
 8000860:	428b      	cmp	r3, r1
 8000862:	d101      	bne.n	8000868 <Configure_EXTI+0x94>
 8000864:	2303      	movs	r3, #3
 8000866:	e006      	b.n	8000876 <Configure_EXTI+0xa2>
 8000868:	2300      	movs	r3, #0
 800086a:	e004      	b.n	8000876 <Configure_EXTI+0xa2>
 800086c:	2302      	movs	r3, #2
 800086e:	e002      	b.n	8000876 <Configure_EXTI+0xa2>
 8000870:	2301      	movs	r3, #1
 8000872:	e000      	b.n	8000876 <Configure_EXTI+0xa2>
 8000874:	2300      	movs	r3, #0
 8000876:	7bb9      	ldrb	r1, [r7, #14]
 8000878:	408b      	lsls	r3, r1
 800087a:	4618      	mov	r0, r3
 800087c:	4946      	ldr	r1, [pc, #280]	; (8000998 <Configure_EXTI+0x1c4>)
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	4302      	orrs	r2, r0
 8000882:	3302      	adds	r3, #2
 8000884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//-----------------------------
	//3) Set Rising/Falling Trigger Case
	//-----------------------------
	//Reset then Set EXTI->RTSR and EXTI->FTSR
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 8000888:	4b48      	ldr	r3, [pc, #288]	; (80009ac <Configure_EXTI+0x1d8>)
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	8812      	ldrh	r2, [r2, #0]
 8000890:	4611      	mov	r1, r2
 8000892:	2201      	movs	r2, #1
 8000894:	408a      	lsls	r2, r1
 8000896:	43d2      	mvns	r2, r2
 8000898:	4611      	mov	r1, r2
 800089a:	4a44      	ldr	r2, [pc, #272]	; (80009ac <Configure_EXTI+0x1d8>)
 800089c:	400b      	ands	r3, r1
 800089e:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 80008a0:	4b42      	ldr	r3, [pc, #264]	; (80009ac <Configure_EXTI+0x1d8>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	8812      	ldrh	r2, [r2, #0]
 80008a8:	4611      	mov	r1, r2
 80008aa:	2201      	movs	r2, #1
 80008ac:	408a      	lsls	r2, r1
 80008ae:	43d2      	mvns	r2, r2
 80008b0:	4611      	mov	r1, r2
 80008b2:	4a3e      	ldr	r2, [pc, #248]	; (80009ac <Configure_EXTI+0x1d8>)
 80008b4:	400b      	ands	r3, r1
 80008b6:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger == EXTI_Trigger_Rising){
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	7b1b      	ldrb	r3, [r3, #12]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d10b      	bne.n	80008d8 <Configure_EXTI+0x104>
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 80008c0:	4b3a      	ldr	r3, [pc, #232]	; (80009ac <Configure_EXTI+0x1d8>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	8812      	ldrh	r2, [r2, #0]
 80008c8:	4611      	mov	r1, r2
 80008ca:	2201      	movs	r2, #1
 80008cc:	408a      	lsls	r2, r1
 80008ce:	4611      	mov	r1, r2
 80008d0:	4a36      	ldr	r2, [pc, #216]	; (80009ac <Configure_EXTI+0x1d8>)
 80008d2:	430b      	orrs	r3, r1
 80008d4:	6093      	str	r3, [r2, #8]
 80008d6:	e029      	b.n	800092c <Configure_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger == EXTI_Trigger_Falling){
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	7b1b      	ldrb	r3, [r3, #12]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d10b      	bne.n	80008f8 <Configure_EXTI+0x124>
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 80008e0:	4b32      	ldr	r3, [pc, #200]	; (80009ac <Configure_EXTI+0x1d8>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	8812      	ldrh	r2, [r2, #0]
 80008e8:	4611      	mov	r1, r2
 80008ea:	2201      	movs	r2, #1
 80008ec:	408a      	lsls	r2, r1
 80008ee:	4611      	mov	r1, r2
 80008f0:	4a2e      	ldr	r2, [pc, #184]	; (80009ac <Configure_EXTI+0x1d8>)
 80008f2:	430b      	orrs	r3, r1
 80008f4:	60d3      	str	r3, [r2, #12]
 80008f6:	e019      	b.n	800092c <Configure_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger == EXTI_Trigger_RisingAndFalling){
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7b1b      	ldrb	r3, [r3, #12]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d115      	bne.n	800092c <Configure_EXTI+0x158>
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 8000900:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <Configure_EXTI+0x1d8>)
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	8812      	ldrh	r2, [r2, #0]
 8000908:	4611      	mov	r1, r2
 800090a:	2201      	movs	r2, #1
 800090c:	408a      	lsls	r2, r1
 800090e:	4611      	mov	r1, r2
 8000910:	4a26      	ldr	r2, [pc, #152]	; (80009ac <Configure_EXTI+0x1d8>)
 8000912:	430b      	orrs	r3, r1
 8000914:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 8000916:	4b25      	ldr	r3, [pc, #148]	; (80009ac <Configure_EXTI+0x1d8>)
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	8812      	ldrh	r2, [r2, #0]
 800091e:	4611      	mov	r1, r2
 8000920:	2201      	movs	r2, #1
 8000922:	408a      	lsls	r2, r1
 8000924:	4611      	mov	r1, r2
 8000926:	4a21      	ldr	r2, [pc, #132]	; (80009ac <Configure_EXTI+0x1d8>)
 8000928:	430b      	orrs	r3, r1
 800092a:	60d3      	str	r3, [r2, #12]
	}

	//-----------------------------
	//4) Set IRQ CallBack Function
	//-----------------------------
	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineX] = EXTI_Config->P_IRQ_CallBack;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	691b      	ldr	r3, [r3, #16]
 8000936:	4a1e      	ldr	r2, [pc, #120]	; (80009b0 <Configure_EXTI+0x1dc>)
 8000938:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//-----------------------------
	//5) Enable/Disable EXTIxNVIC IRQ Mask
	//-----------------------------
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable){
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	7b5b      	ldrb	r3, [r3, #13]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d110      	bne.n	8000966 <Configure_EXTI+0x192>
		EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 8000944:	4b19      	ldr	r3, [pc, #100]	; (80009ac <Configure_EXTI+0x1d8>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	8812      	ldrh	r2, [r2, #0]
 800094c:	4611      	mov	r1, r2
 800094e:	2201      	movs	r2, #1
 8000950:	408a      	lsls	r2, r1
 8000952:	4611      	mov	r1, r2
 8000954:	4a15      	ldr	r2, [pc, #84]	; (80009ac <Configure_EXTI+0x1d8>)
 8000956:	430b      	orrs	r3, r1
 8000958:	6013      	str	r3, [r2, #0]
		NVIC_Enable(EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fe6c 	bl	800063c <NVIC_Enable>
	}
	else if(EXTI_Config->IRQ_EN == EXTI_IRQ_Disable){
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineX);
		NVIC_Disable(EXTI_Config->EXTI_PIN.EXTI_InputLineX);
	}
}
 8000964:	e014      	b.n	8000990 <Configure_EXTI+0x1bc>
	else if(EXTI_Config->IRQ_EN == EXTI_IRQ_Disable){
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7b5b      	ldrb	r3, [r3, #13]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d110      	bne.n	8000990 <Configure_EXTI+0x1bc>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <Configure_EXTI+0x1d8>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	8812      	ldrh	r2, [r2, #0]
 8000976:	4611      	mov	r1, r2
 8000978:	2201      	movs	r2, #1
 800097a:	408a      	lsls	r2, r1
 800097c:	43d2      	mvns	r2, r2
 800097e:	4611      	mov	r1, r2
 8000980:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <Configure_EXTI+0x1d8>)
 8000982:	400b      	ands	r3, r1
 8000984:	6013      	str	r3, [r2, #0]
		NVIC_Disable(EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff febc 	bl	8000708 <NVIC_Disable>
}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40010000 	.word	0x40010000
 800099c:	40010800 	.word	0x40010800
 80009a0:	40010c00 	.word	0x40010c00
 80009a4:	40011000 	.word	0x40011000
 80009a8:	40011400 	.word	0x40011400
 80009ac:	40010400 	.word	0x40010400
 80009b0:	20000028 	.word	0x20000028

080009b4 <MCAL_EXTI_init>:
 * 					 STM32F103C6 MCU has GPIO A..E but LQFP48 only has the following:
 * 					 GPIOA & GPIOB Fully included
 * 					 GPIOC & GPIOD Partially included
 * 					 GPIOE not included
 */
void MCAL_EXTI_init(EXTI_PinConfig_t *EXTI_Config){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	Configure_EXTI(EXTI_Config);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff09 	bl	80007d4 <Configure_EXTI>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <EXTI0_IRQHandler>:

//====================================================================
//							ISR Functions
//====================================================================

void EXTI0_IRQHandler(void){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<0);
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <EXTI0_IRQHandler+0x1c>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <EXTI0_IRQHandler+0x1c>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <EXTI0_IRQHandler+0x20>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4798      	blx	r3
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40010400 	.word	0x40010400
 80009ec:	20000028 	.word	0x20000028

080009f0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<1);
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <EXTI1_IRQHandler+0x1c>)
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <EXTI1_IRQHandler+0x1c>)
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <EXTI1_IRQHandler+0x20>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	4798      	blx	r3
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40010400 	.word	0x40010400
 8000a10:	20000028 	.word	0x20000028

08000a14 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<2);
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <EXTI2_IRQHandler+0x1c>)
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <EXTI2_IRQHandler+0x1c>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <EXTI2_IRQHandler+0x20>)
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	4798      	blx	r3
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40010400 	.word	0x40010400
 8000a34:	20000028 	.word	0x20000028

08000a38 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<3);
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <EXTI3_IRQHandler+0x1c>)
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <EXTI3_IRQHandler+0x1c>)
 8000a42:	f043 0308 	orr.w	r3, r3, #8
 8000a46:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <EXTI3_IRQHandler+0x20>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	4798      	blx	r3
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40010400 	.word	0x40010400
 8000a58:	20000028 	.word	0x20000028

08000a5c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<4);
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <EXTI4_IRQHandler+0x1c>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <EXTI4_IRQHandler+0x1c>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <EXTI4_IRQHandler+0x20>)
 8000a6e:	691b      	ldr	r3, [r3, #16]
 8000a70:	4798      	blx	r3
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40010400 	.word	0x40010400
 8000a7c:	20000028 	.word	0x20000028

08000a80 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){
 8000a84:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	f003 0320 	and.w	r3, r3, #32
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d008      	beq.n	8000aa2 <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= (1<<5);
 8000a90:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	4a22      	ldr	r2, [pc, #136]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000a96:	f043 0320 	orr.w	r3, r3, #32
 8000a9a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[5]();
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <EXTI9_5_IRQHandler+0xa4>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<6){
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d008      	beq.n	8000ac0 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (1<<6);
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	4a1b      	ldr	r2, [pc, #108]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab8:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[6]();
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <EXTI9_5_IRQHandler+0xa4>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<7){
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d008      	beq.n	8000ade <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (1<<7);
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad6:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[7]();
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <EXTI9_5_IRQHandler+0xa4>)
 8000ada:	69db      	ldr	r3, [r3, #28]
 8000adc:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<8){
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d008      	beq.n	8000afc <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (1<<8);
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	4a0c      	ldr	r2, [pc, #48]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af4:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[8]();
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <EXTI9_5_IRQHandler+0xa4>)
 8000af8:	6a1b      	ldr	r3, [r3, #32]
 8000afa:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<9){
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d008      	beq.n	8000b1a <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (1<<9);
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b12:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[9]();
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <EXTI9_5_IRQHandler+0xa4>)
 8000b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b18:	4798      	blx	r3
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40010400 	.word	0x40010400
 8000b24:	20000028 	.word	0x20000028

08000b28 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10){
 8000b2c:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d008      	beq.n	8000b4a <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |= (1<<10);
 8000b38:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	4a29      	ldr	r2, [pc, #164]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b42:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[10]();
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <EXTI15_10_IRQHandler+0xc0>)
 8000b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b48:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<11){
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d008      	beq.n	8000b68 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (1<<11);
 8000b56:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	4a22      	ldr	r2, [pc, #136]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b60:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[11]();
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <EXTI15_10_IRQHandler+0xc0>)
 8000b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b66:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<12){
 8000b68:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d008      	beq.n	8000b86 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (1<<12);
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	4a1a      	ldr	r2, [pc, #104]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b7e:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[12]();
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <EXTI15_10_IRQHandler+0xc0>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<13){
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d008      	beq.n	8000ba4 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (1<<13);
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b9c:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[13]();
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <EXTI15_10_IRQHandler+0xc0>)
 8000ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba2:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<14){
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d008      	beq.n	8000bc2 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (1<<14);
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bba:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[14]();
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <EXTI15_10_IRQHandler+0xc0>)
 8000bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bc0:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<15){
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d008      	beq.n	8000be0 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (1<<15);
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bd8:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[15]();
 8000bda:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <EXTI15_10_IRQHandler+0xc0>)
 8000bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bde:	4798      	blx	r3
	}
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40010400 	.word	0x40010400
 8000be8:	20000028 	.word	0x20000028

08000bec <Get_CRLH_Position>:
 */

#include "gpio.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber){
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	2b80      	cmp	r3, #128	; 0x80
 8000bfa:	d042      	beq.n	8000c82 <Get_CRLH_Position+0x96>
 8000bfc:	2b80      	cmp	r3, #128	; 0x80
 8000bfe:	dc11      	bgt.n	8000c24 <Get_CRLH_Position+0x38>
 8000c00:	2b08      	cmp	r3, #8
 8000c02:	d036      	beq.n	8000c72 <Get_CRLH_Position+0x86>
 8000c04:	2b08      	cmp	r3, #8
 8000c06:	dc06      	bgt.n	8000c16 <Get_CRLH_Position+0x2a>
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d02e      	beq.n	8000c6a <Get_CRLH_Position+0x7e>
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	d02e      	beq.n	8000c6e <Get_CRLH_Position+0x82>
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d028      	beq.n	8000c66 <Get_CRLH_Position+0x7a>
 8000c14:	e047      	b.n	8000ca6 <Get_CRLH_Position+0xba>
 8000c16:	2b20      	cmp	r3, #32
 8000c18:	d02f      	beq.n	8000c7a <Get_CRLH_Position+0x8e>
 8000c1a:	2b40      	cmp	r3, #64	; 0x40
 8000c1c:	d02f      	beq.n	8000c7e <Get_CRLH_Position+0x92>
 8000c1e:	2b10      	cmp	r3, #16
 8000c20:	d029      	beq.n	8000c76 <Get_CRLH_Position+0x8a>
 8000c22:	e040      	b.n	8000ca6 <Get_CRLH_Position+0xba>
 8000c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c28:	d033      	beq.n	8000c92 <Get_CRLH_Position+0xa6>
 8000c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c2e:	dc09      	bgt.n	8000c44 <Get_CRLH_Position+0x58>
 8000c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c34:	d029      	beq.n	8000c8a <Get_CRLH_Position+0x9e>
 8000c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c3a:	d028      	beq.n	8000c8e <Get_CRLH_Position+0xa2>
 8000c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c40:	d021      	beq.n	8000c86 <Get_CRLH_Position+0x9a>
 8000c42:	e030      	b.n	8000ca6 <Get_CRLH_Position+0xba>
 8000c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c48:	d027      	beq.n	8000c9a <Get_CRLH_Position+0xae>
 8000c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c4e:	dc03      	bgt.n	8000c58 <Get_CRLH_Position+0x6c>
 8000c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c54:	d01f      	beq.n	8000c96 <Get_CRLH_Position+0xaa>
 8000c56:	e026      	b.n	8000ca6 <Get_CRLH_Position+0xba>
 8000c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c5c:	d01f      	beq.n	8000c9e <Get_CRLH_Position+0xb2>
 8000c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c62:	d01e      	beq.n	8000ca2 <Get_CRLH_Position+0xb6>
 8000c64:	e01f      	b.n	8000ca6 <Get_CRLH_Position+0xba>
	case GPIO_PIN_0:
		return 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e01e      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	e01c      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000c6e:	2308      	movs	r3, #8
 8000c70:	e01a      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000c72:	230c      	movs	r3, #12
 8000c74:	e018      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000c76:	2310      	movs	r3, #16
 8000c78:	e016      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000c7a:	2314      	movs	r3, #20
 8000c7c:	e014      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000c7e:	2318      	movs	r3, #24
 8000c80:	e012      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000c82:	231c      	movs	r3, #28
 8000c84:	e010      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e00e      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	e00c      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000c8e:	2308      	movs	r3, #8
 8000c90:	e00a      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000c92:	230c      	movs	r3, #12
 8000c94:	e008      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000c96:	2310      	movs	r3, #16
 8000c98:	e006      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000c9a:	2314      	movs	r3, #20
 8000c9c:	e004      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000c9e:	2318      	movs	r3, #24
 8000ca0:	e002      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000ca2:	231c      	movs	r3, #28
 8000ca4:	e000      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 8000ca6:	2300      	movs	r3, #0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr

08000cb2 <MCAL_GPIO_init>:
 * Note				-STM32F103C6 MCU has GPIO A..E but LQFP48 only has the following:
 * 					 GPIOA & GPIOB Fully included
 * 					 GPIOC & GPIOD Partially included
 * 					 GPIOE not included
 */
void MCAL_GPIO_init(GPIO_t *GPIOx, GPIO_PinConfig_t *PinConfig){
 8000cb2:	b590      	push	{r4, r7, lr}
 8000cb4:	b085      	sub	sp, #20
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	6039      	str	r1, [r7, #0]
	volatile uint32_t *configRegister = NULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_CONFIG = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	73fb      	strb	r3, [r7, #15]

	configRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL: &GPIOx->CRH;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	2bff      	cmp	r3, #255	; 0xff
 8000cca:	d801      	bhi.n	8000cd0 <MCAL_GPIO_init+0x1e>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	e001      	b.n	8000cd4 <MCAL_GPIO_init+0x22>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	60bb      	str	r3, [r7, #8]

	//Clear CNF & MODE
	(*configRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff86 	bl	8000bec <Get_CRLH_Position>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	4093      	lsls	r3, r2
 8000ce8:	43da      	mvns	r2, r3
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	601a      	str	r2, [r3, #0]

	//If PIN is OUTPUT
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) ||
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	885b      	ldrh	r3, [r3, #2]
 8000cf8:	2b04      	cmp	r3, #4
 8000cfa:	d00b      	beq.n	8000d14 <MCAL_GPIO_init+0x62>
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	885b      	ldrh	r3, [r3, #2]
 8000d00:	2b05      	cmp	r3, #5
 8000d02:	d007      	beq.n	8000d14 <MCAL_GPIO_init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD))
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	885b      	ldrh	r3, [r3, #2]
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) ||
 8000d08:	2b06      	cmp	r3, #6
 8000d0a:	d003      	beq.n	8000d14 <MCAL_GPIO_init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD))
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	885b      	ldrh	r3, [r3, #2]
 8000d10:	2b07      	cmp	r3, #7
 8000d12:	d10e      	bne.n	8000d32 <MCAL_GPIO_init+0x80>
	{
		PIN_CONFIG = ((((PinConfig->GPIO_MODE - 4) << 2) | PinConfig->GPIO_OUTPUT_SPEED) & 0x0F);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	885b      	ldrh	r3, [r3, #2]
 8000d18:	3b04      	subs	r3, #4
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	b25a      	sxtb	r2, r3
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	889b      	ldrh	r3, [r3, #4]
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	e02d      	b.n	8000d8e <MCAL_GPIO_init+0xdc>
	}
	else //PIN is INPUT
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOAT) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)){
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	885b      	ldrh	r3, [r3, #2]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d003      	beq.n	8000d42 <MCAL_GPIO_init+0x90>
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	885b      	ldrh	r3, [r3, #2]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d108      	bne.n	8000d54 <MCAL_GPIO_init+0xa2>
			PIN_CONFIG = ((((PinConfig->GPIO_MODE - 4) << 2) | 0x0) & 0x0F);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	885b      	ldrh	r3, [r3, #2]
 8000d46:	3b04      	subs	r3, #4
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	f003 030f 	and.w	r3, r3, #15
 8000d50:	73fb      	strb	r3, [r7, #15]
 8000d52:	e01c      	b.n	8000d8e <MCAL_GPIO_init+0xdc>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF){
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	885b      	ldrh	r3, [r3, #2]
 8000d58:	2b08      	cmp	r3, #8
 8000d5a:	d102      	bne.n	8000d62 <MCAL_GPIO_init+0xb0>
			PIN_CONFIG = ((((GPIO_MODE_INPUT_FLOAT) << 2) | 0x0) & 0x0F);
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	73fb      	strb	r3, [r7, #15]
 8000d60:	e015      	b.n	8000d8e <MCAL_GPIO_init+0xdc>
		}
		else{
			PIN_CONFIG = ((((GPIO_MODE_INPUT_PU) << 2) | 0x0) & 0x0F);
 8000d62:	2308      	movs	r3, #8
 8000d64:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU){
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	885b      	ldrh	r3, [r3, #2]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d107      	bne.n	8000d7e <MCAL_GPIO_init+0xcc>
				//Input Pull-Up >> GPIOx->ODR = 1, Table 20: Port bit configuration table.
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	8812      	ldrh	r2, [r2, #0]
 8000d76:	431a      	orrs	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	e007      	b.n	8000d8e <MCAL_GPIO_init+0xdc>
			}
			else{
				//Input Pull-Down >> GPIOx->ODR = 0, Table 20: Port bit configuration table.
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	8812      	ldrh	r2, [r2, #0]
 8000d86:	43d2      	mvns	r2, r2
 8000d88:	401a      	ands	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configRegister) |= (PIN_CONFIG  << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000d8e:	7bfc      	ldrb	r4, [r7, #15]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff29 	bl	8000bec <Get_CRLH_Position>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	fa04 f203 	lsl.w	r2, r4, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	431a      	orrs	r2, r3
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	601a      	str	r2, [r3, #0]
}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd90      	pop	{r4, r7, pc}

08000db2 <MCAL_GPIO_WritePin>:
 * @param [in]	 	-PinNumber: Set PinNumber based on @ref GPIO_PIN_def
 * @param [in]	 	-data: value to be written on PIN
 * @retval 			-NONE
 * Note				-NONE
 */
void MCAL_GPIO_WritePin(GPIO_t *GPIOx, uint16_t PinNumber, uint8_t data){
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	460b      	mov	r3, r1
 8000dbc:	807b      	strh	r3, [r7, #2]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	707b      	strb	r3, [r7, #1]
	if(data != GPIO_PIN_RESET){
 8000dc2:	787b      	ldrb	r3, [r7, #1]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d006      	beq.n	8000dd6 <MCAL_GPIO_WritePin+0x24>
		GPIOx->ODR |= PinNumber;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	887b      	ldrh	r3, [r7, #2]
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	60da      	str	r2, [r3, #12]
	}
	else{
		GPIOx->ODR &= ~(PinNumber);
	}
}
 8000dd4:	e006      	b.n	8000de4 <MCAL_GPIO_WritePin+0x32>
		GPIOx->ODR &= ~(PinNumber);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	887a      	ldrh	r2, [r7, #2]
 8000ddc:	43d2      	mvns	r2, r2
 8000dde:	401a      	ands	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	60da      	str	r2, [r3, #12]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr

08000dee <MCAL_GPIO_WritePort>:
 * @param [in]	 	-GPIOx: where x = (A,B,C,D,E)
 * @param [in]	 	-data: value to be written on PORT
 * @retval 			-NONE
 * Note				-NONE
 */
void MCAL_GPIO_WritePort(GPIO_t *GPIOx, uint16_t data){
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	460b      	mov	r3, r1
 8000df8:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)data;
 8000dfa:	887a      	ldrh	r2, [r7, #2]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	60da      	str	r2, [r3, #12]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr

08000e0a <delay_ms>:
#include "keypad.h"
#include "exti.h"

uint32_t IRQ_Flag = 0;

void delay_ms(uint32_t n){
 8000e0a:	b480      	push	{r7}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
	int i, j;
	for(i = 0; i < n; i++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	e00b      	b.n	8000e30 <delay_ms+0x26>
		for(j = 0; j < 255; j++);
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	e002      	b.n	8000e24 <delay_ms+0x1a>
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	3301      	adds	r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	2bfe      	cmp	r3, #254	; 0xfe
 8000e28:	ddf9      	ble.n	8000e1e <delay_ms+0x14>
	for(i = 0; i < n; i++)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d8ef      	bhi.n	8000e18 <delay_ms+0xe>
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
	...

08000e44 <Clock_init>:

void Clock_init(){
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_ENABLE();
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <Clock_init+0x30>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a09      	ldr	r2, [pc, #36]	; (8000e74 <Clock_init+0x30>)
 8000e4e:	f043 0304 	orr.w	r3, r3, #4
 8000e52:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_ENABLE();
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <Clock_init+0x30>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <Clock_init+0x30>)
 8000e5a:	f043 0308 	orr.w	r3, r3, #8
 8000e5e:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_ENABLE();
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <Clock_init+0x30>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a03      	ldr	r2, [pc, #12]	; (8000e74 <Clock_init+0x30>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6193      	str	r3, [r2, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	40021000 	.word	0x40021000

08000e78 <EXTI9_CallBack>:

void EXTI9_CallBack(){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <EXTI9_CallBack+0x1c>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	601a      	str	r2, [r3, #0]
	LCD_WriteString("EXTI9_IRQ _|-");
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <EXTI9_CallBack+0x20>)
 8000e84:	f7ff fa98 	bl	80003b8 <LCD_WriteString>
	delay_ms(1000);
 8000e88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e8c:	f7ff ffbd 	bl	8000e0a <delay_ms>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	2000001c 	.word	0x2000001c
 8000e98:	08000fa8 	.word	0x08000fa8

08000e9c <main>:

int main(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
	Clock_init();
 8000ea2:	f7ff ffcf 	bl	8000e44 <Clock_init>
	LCD_INIT();
 8000ea6:	f7ff f97f 	bl	80001a8 <LCD_INIT>
	LCD_ClearScreen();
 8000eaa:	f7ff fb9b 	bl	80005e4 <LCD_ClearScreen>

	EXTI_PinConfig_t EXTI_Config;
	EXTI_Config.EXTI_PIN = EXTI9PB9;
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <main+0x4c>)
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eb4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_Config.Trigger = EXTI_Trigger_Rising;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	743b      	strb	r3, [r7, #16]
	EXTI_Config.IRQ_EN = EXTI_IRQ_Enable;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	747b      	strb	r3, [r7, #17]
	EXTI_Config.P_IRQ_CallBack = EXTI9_CallBack;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <main+0x50>)
 8000ec2:	617b      	str	r3, [r7, #20]
	MCAL_EXTI_init(&EXTI_Config);
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fd74 	bl	80009b4 <MCAL_EXTI_init>

	IRQ_Flag = 1;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <main+0x54>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	601a      	str	r2, [r3, #0]

	while(1){
		if(IRQ_Flag){
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <main+0x54>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0fb      	beq.n	8000ed2 <main+0x36>
			LCD_ClearScreen();
 8000eda:	f7ff fb83 	bl	80005e4 <LCD_ClearScreen>
			IRQ_Flag = 0;
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <main+0x54>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag){
 8000ee4:	e7f5      	b.n	8000ed2 <main+0x36>
 8000ee6:	bf00      	nop
 8000ee8:	08000fb8 	.word	0x08000fb8
 8000eec:	08000e79 	.word	0x08000e79
 8000ef0:	2000001c 	.word	0x2000001c

08000ef4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ef6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ef8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000efe:	490d      	ldr	r1, [pc, #52]	; (8000f34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <LoopForever+0xe>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f04:	e002      	b.n	8000f0c <LoopCopyDataInit>

08000f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0a:	3304      	adds	r3, #4

08000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f10:	d3f9      	bcc.n	8000f06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f14:	4c0a      	ldr	r4, [pc, #40]	; (8000f40 <LoopForever+0x16>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f18:	e001      	b.n	8000f1e <LoopFillZerobss>

08000f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f1c:	3204      	adds	r2, #4

08000f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f20:	d3fb      	bcc.n	8000f1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f22:	f000 f811 	bl	8000f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f26:	f7ff ffb9 	bl	8000e9c <main>

08000f2a <LoopForever>:

LoopForever:
    b LoopForever
 8000f2a:	e7fe      	b.n	8000f2a <LoopForever>
  ldr   r0, =_estack
 8000f2c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f34:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000f38:	08000fcc 	.word	0x08000fcc
  ldr r2, =_sbss
 8000f3c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000f40:	20000068 	.word	0x20000068

08000f44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <ADC1_2_IRQHandler>
	...

08000f48 <__libc_init_array>:
 8000f48:	b570      	push	{r4, r5, r6, lr}
 8000f4a:	2500      	movs	r5, #0
 8000f4c:	4e0c      	ldr	r6, [pc, #48]	; (8000f80 <__libc_init_array+0x38>)
 8000f4e:	4c0d      	ldr	r4, [pc, #52]	; (8000f84 <__libc_init_array+0x3c>)
 8000f50:	1ba4      	subs	r4, r4, r6
 8000f52:	10a4      	asrs	r4, r4, #2
 8000f54:	42a5      	cmp	r5, r4
 8000f56:	d109      	bne.n	8000f6c <__libc_init_array+0x24>
 8000f58:	f000 f81a 	bl	8000f90 <_init>
 8000f5c:	2500      	movs	r5, #0
 8000f5e:	4e0a      	ldr	r6, [pc, #40]	; (8000f88 <__libc_init_array+0x40>)
 8000f60:	4c0a      	ldr	r4, [pc, #40]	; (8000f8c <__libc_init_array+0x44>)
 8000f62:	1ba4      	subs	r4, r4, r6
 8000f64:	10a4      	asrs	r4, r4, #2
 8000f66:	42a5      	cmp	r5, r4
 8000f68:	d105      	bne.n	8000f76 <__libc_init_array+0x2e>
 8000f6a:	bd70      	pop	{r4, r5, r6, pc}
 8000f6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f70:	4798      	blx	r3
 8000f72:	3501      	adds	r5, #1
 8000f74:	e7ee      	b.n	8000f54 <__libc_init_array+0xc>
 8000f76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f7a:	4798      	blx	r3
 8000f7c:	3501      	adds	r5, #1
 8000f7e:	e7f2      	b.n	8000f66 <__libc_init_array+0x1e>
 8000f80:	08000fc4 	.word	0x08000fc4
 8000f84:	08000fc4 	.word	0x08000fc4
 8000f88:	08000fc4 	.word	0x08000fc4
 8000f8c:	08000fc8 	.word	0x08000fc8

08000f90 <_init>:
 8000f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f92:	bf00      	nop
 8000f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f96:	bc08      	pop	{r3}
 8000f98:	469e      	mov	lr, r3
 8000f9a:	4770      	bx	lr

08000f9c <_fini>:
 8000f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9e:	bf00      	nop
 8000fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fa2:	bc08      	pop	{r3}
 8000fa4:	469e      	mov	lr, r3
 8000fa6:	4770      	bx	lr
