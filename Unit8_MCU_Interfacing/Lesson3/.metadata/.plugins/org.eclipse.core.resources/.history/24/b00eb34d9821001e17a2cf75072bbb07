/*
 * usart.c
 *
 *  Created on: Jul 10, 2023
 *      Author: Lenovo
 */

#include "usart.h"

//====================================================================
//						Generic Variables
//====================================================================

USART_Config_t* GP_UART_Config = NULL;

//====================================================================
//						Generic Functions
//====================================================================




//====================================================================
//						APIs Functions Definitions
//====================================================================

/**================================================================
 * @Fn				-MCAL_UART_init
 * @brief 			-Initializes UART (Asynchronous Only)
 * @param [in]	 	-UARTx: where x = (1,2,3)
 * @param [in] 		-UART_Config: Contains specified parameters for USART
 * @retval 			-NONE
 * Note				-Supports ASYNC Mode and 8MHZ Clock
 */
void MCAL_UART_init(USART_t* UARTx, USART_Config_t* UART_Config){

	GP_UART_Config = UART_Config;

	//-----------------------------
	//1) Enable Clock for given USART Peripheral
	//-----------------------------
	if(UARTx == USART1)
		RCC_USART1_CLK_ENABLE();
	else if(UARTx == USART2)
		RCC_USART2_CLK_ENABLE();
	else if(UARTx == USART3)
		RCC_USART3_CLK_ENABLE();

	//-----------------------------
	//2) Enable USART Module
	//-----------------------------
	UARTx->CR1 |= 1<<13;

	//-----------------------------
	//3) Enable TX/RX
	//-----------------------------
	UARTx->CR1 |= UART_Config->USART_MODE;

	//-----------------------------
	//4) Configure PayLoad Length
	//-----------------------------
	UARTx->CR1 |= UART_Config->USART_PayLoad;

	//-----------------------------
	//5) Configure Parity Mode
	//-----------------------------
	UARTx->CR1 |= UART_Config->USART_Parity;

	//-----------------------------
	//6) Configure number of Stop Bits
	//-----------------------------
	UARTx->CR2 |= UART_Config->USART_StopBit;

	//-----------------------------
	//7) Configure Hardware Flow Control
	//-----------------------------
	UARTx->CR3 |= UART_Config->USART_HwFlowCtrl;

	//-----------------------------
	//8) Configure BaudRate Register
	//-----------------------------
	uint32_t PCLK, BRR;
	if(UARTx == USART1)
		PCLK = MCAL_RCC_getPCLK2();
	else
		PCLK = MCAL_RCC_getPCLK1();

	BRR = UART_BRR_Register(PCLK, UART_Config->USART_BaudRate);
	UARTx->BRR = BRR;

	//-----------------------------
	//9) Configure IRQ
	//-----------------------------
	if(UART_Config->USART_IRQ_EN != USART_IRQ_EN_NONE){
		UARTx->CR1 |= UART_Config->USART_IRQ_EN;
		//Enable UARTx NVIC IRQ Mask
		if(UARTx == USART1)
			NVIC_IRQ37_USART1_Enable;
		else if(UARTx == USART2)
			NVIC_IRQ38_USART2_Enable;
		else if(UARTx == USART3)
			NVIC_IRQ39_USART3_Enable;
	}
}

/**================================================================
 * @Fn				-MCAL_UART_deinit
 * @brief 			-DeInitializes UART
 * @param [in]	 	-UARTx: where x = (1,2,3)
 * @retval 			-NONE
 * Note				-Resets by RCC
 */
void MCAL_UART_deinit(USART_t* UARTx){

	if(UARTx == USART1){
		RCC_USART1_CLK_RESET();
		NVIC_IRQ37_USART1_Disable;
	}
	else if(UARTx == USART2){
		RCC_USART2_CLK_RESET();
		NVIC_IRQ38_USART2_Disable;
	}
	else if(UARTx == USART3){
		RCC_USART3_CLK_RESET();
		NVIC_IRQ39_USART3_Disable;
	}
}

void MCAL_UART_GPIO_SetPin(USART_t* UARTx){

}

/**================================================================
 * @Fn				-MCAL_UART_SendData
 * @brief 			-Send Buffer on UART
 * @param [in]	 	-UARTx: where x = (1,2,3)
 * @param [in]	 	-pTxBuffer: Transmit Buffer
 * @param [in]	 	-PollingEn: Enable/Disable Polling
 * @retval 			-NONE
 * Note				-Should initialize UART first
 */
void MCAL_UART_SendData(USART_t* UARTx, uint16_t* pTxBuffer, enum PollingMechanism PollingEn){

}

void MCAL_UART_ReceiveData(USART_t* UARTx, uint16_t* pRxBuffer, enum PollingMechanism PollingEn){

}

void MCAL_UART_WAIT_TC(USART_t* UARTx){

}

